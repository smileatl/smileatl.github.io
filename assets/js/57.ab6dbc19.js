(window.webpackJsonp=window.webpackJsonp||[]).push([[57],{373:function(t,s,p){"use strict";p.r(s);var a=p(7),v=Object(a.a)({},(function(){var t=this,s=t._self._c;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h1",{attrs:{id:"数据结构-单链表的基本操作"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#数据结构-单链表的基本操作"}},[t._v("#")]),t._v(" 数据结构——单链表的基本操作")]),t._v(" "),s("p",[s("img",{attrs:{src:"/assets/1666925691734.png",alt:"1666925691734"}})]),t._v(" "),s("p",[s("img",{attrs:{src:"/assets/1685936124838.png",alt:"1685936124838"}})]),t._v(" "),s("blockquote",[s("p",[t._v("销毁单链表")])]),t._v(" "),s("p",[s("img",{attrs:{src:"/assets/1685936131488.png",alt:"1685936131488"}})]),t._v(" "),s("blockquote",[s("p",[t._v("[补充算法]清空单链表")])]),t._v(" "),s("p",[t._v("链表仍然存在将其置空(头结点和头指针仍然存在)")]),t._v(" "),s("p",[s("img",{attrs:{src:"/assets/1685936140721.png",alt:"1685936140721"}})]),t._v(" "),s("blockquote",[s("p",[t._v("[补充算法]求表长")])]),t._v(" "),s("p",[t._v("[算法思路]从首元结点开始依次计数直至最后一个元素")]),t._v(" "),s("p",[s("img",{attrs:{src:"/assets/1685936152302.png",alt:"1685936152302"}})]),t._v(" "),s("blockquote",[s("p",[t._v("==总结：常用操作"),s("br"),t._v("\n指向头结点 p=L;"),s("br"),t._v("\n指向首元结点p=L->next;i=1;"),s("br"),t._v("\n指向下一结点p=p->next;==")])]),t._v(" "),s("p",[s("img",{attrs:{src:"/assets/1685936170969.png",alt:"1685936170969"}})]),t._v(" "),s("p",[t._v("链表不是随机存取结构")]),t._v(" "),s("p",[s("img",{attrs:{src:"/assets/1685936177791.png",alt:"1685936177791"}})]),t._v(" "),s("p",[t._v("[算法步骤］①用指针p指向首元结点，用j做计数器初值赋为1。②从首元结点开始依次顺着链域next向下访问，只要指向当前结点的指针p不为空(NULL), 并且没有到达序号为i的结点，则循环执行以下操作：")]),t._v(" "),s("p",[t._v("• p指向下一个结点；• 计数器j相应加1。")]),t._v(" "),s("p",[t._v("③退出循环时，如果指针p为空，或者计数器j>i,说明指定的序号i值不合法大于表长n或小于1), 取值失败返回ERROR;否则取值成功，此时j=i时，p所指的结点就是要找的第l个结点，用参数e保存当前结点的数据域，返回OK。")]),t._v(" "),s("p",[s("img",{attrs:{src:"/assets/1685936185418.png",alt:"1685936185418"}})]),t._v(" "),s("blockquote",[s("p",[t._v("[算法2.8]单链表的按值查找——根据特定数据获取该数据所在地址")])]),t._v(" "),s("p",[t._v("算法步骤1.从第1个节点依次与e比较"),s("br"),t._v("\n2.如果找到一个与e值相等的数据，则返回在列表中的地址"),s("br"),t._v("\n3.如果查遍整个链表都没有找到和一直相等的元素停止循环返回0/NULL")]),t._v(" "),s("p",[s("img",{attrs:{src:"/assets/1685936195167.png",alt:"1685936195167"}})]),t._v(" "),s("p",[s("img",{attrs:{src:"/assets/1685936204657.png",alt:"1685936204657"}})]),t._v(" "),s("p",[t._v("[算法分析］该算法的执行时间与待查找的值e相关， 其平均时间复杂度分析类似于算法2.7,也为O(n)。")]),t._v(" "),s("blockquote",[s("p",[t._v("[算法2.9]单链表的插入")])]),t._v(" "),s("p",[s("img",{attrs:{src:"/assets/1685936213586.png",alt:"1685936213586"}})]),t._v(" "),s("p",[s("img",{attrs:{src:"/assets/1685936225676.png",alt:"1685936225676"}})]),t._v(" "),s("p",[t._v("思考步骤①②能互换吗？\n直接换顺序执行②找不到后继ai结点了\n先用p指向ai-1结点再用用q指针指向ai结点")]),t._v(" "),s("p",[s("img",{attrs:{src:"/assets/1685936231566.png",alt:"1685936231566"}})]),t._v(" "),s("blockquote",[s("p",[t._v("[算法2.10]删除第i个结点")])]),t._v(" "),s("p",[t._v("[算法步骤]1.找到第i-1个结点,如果有必要的话保存ai的值且将地址存于在q中以备释放")]),t._v(" "),s("p",[t._v("2.找到ai+1的位置赋值给，ai-1的next域")]),t._v(" "),s("p",[t._v("3.释放ai")]),t._v(" "),s("p",[s("img",{attrs:{src:"/assets/1685936240043.png",alt:"1685936240043"}})]),t._v(" "),s("p",[t._v("p->next = p->next->next;")]),t._v(" "),s("p",[s("img",{attrs:{src:"/assets/1685936247159.png",alt:"1685936247159"}})]),t._v(" "),s("p",[s("img",{attrs:{src:"/assets/1666928312359.png",alt:"1666928312359"}})]),t._v(" "),s("p",[t._v("[算法分析]")]),t._v(" "),s("p",[s("img",{attrs:{src:"/assets/1666928714974.png",alt:"1666928714974"}})])])}),[],!1,null,null,null);s.default=v.exports}}]);