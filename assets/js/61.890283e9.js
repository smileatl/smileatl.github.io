(window.webpackJsonp=window.webpackJsonp||[]).push([[61],{378:function(s,v,_){"use strict";_.r(v);var t=_(7),p=Object(t.a)({},(function(){var s=this,v=s._self._c;return v("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[v("h1",{attrs:{id:"数据结构-栈与队列的定义和特点"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#数据结构-栈与队列的定义和特点"}},[s._v("#")]),s._v(" 数据结构——栈与队列的定义和特点")]),s._v(" "),v("p",[s._v("栈和队列是两种重要的线性结构。栈和队列是限定插入和删除只能在表的“"),v("strong",[s._v("端点")]),s._v("”进行的线性表。")]),s._v(" "),v("p",[v("img",{attrs:{src:"/assets/1685936597932.png",alt:"1685936597932"}})]),s._v(" "),v("blockquote",[v("p",[s._v("栈--后进先出")])]),s._v(" "),v("p",[v("img",{attrs:{src:"/assets/1685936603894.png",alt:"1685936603894"}})]),s._v(" "),v("p",[s._v("由于栈的操作具有"),v("strong",[s._v("后进先出")]),s._v("的固有特性，使栈成为程序设计中有用的工具。另外 ，如果问题求解过程中具有“后进先出”的天然特性则求解的算法中必须利用“栈”")]),s._v(" "),v("p",[s._v("数制转换 表达式求值 括号匹配的检验 八皇后问题 行编辑程序 函数调用 迷宫求解 递归调用的实现")]),s._v(" "),v("p",[v("img",{attrs:{src:"/assets/1685936611193.png",alt:"1685936611193"}})]),s._v(" "),v("blockquote",[v("p",[s._v("队列--先进先出（先进入的元素先被删除）")])]),s._v(" "),v("p",[v("img",{attrs:{src:"/assets/1685936615594.png",alt:"1685936615594"}})]),s._v(" "),v("p",[s._v("由于队列的操作具有先进先出的特性，使得队列成为程序设计中解决类似排队问题的有用工具。")]),s._v(" "),v("ul",[v("li",[v("p",[s._v("脱机打印输出按申请的先后顺序依次输出")])]),s._v(" "),v("li",[v("p",[s._v("多用户系统中多个用户排成队，分时地循环使用CPU和主存")])]),s._v(" "),v("li",[v("p",[s._v("按用户的优先级排成多个队，每个优先级一个队列")])]),s._v(" "),v("li",[v("p",[s._v("实时控制系统中信号按接收的先后顺序依次处理")])]),s._v(" "),v("li",[v("p",[s._v("网络电文传输按照到达时间的先后顺序依次进行")])])]),s._v(" "),v("p",[s._v("==栈和队列的基本操作是线性表操作的子集，它们是操作受限的线性表==，因此，可称为限定性的数据结构。")]),s._v(" "),v("p",[s._v("栈(stack)是限定仅在表尾进行插入或删除操作的线性表。又称后进先出(Last In First Out的线性表简称"),v("strong",[s._v("LIFO")]),s._v("结构")]),s._v(" "),v("p",[s._v("表尾an端为"),v("strong",[s._v("栈顶")]),s._v("Top 表头a1端"),v("strong",[s._v("栈底")]),s._v("Base(Bottom)不含元素的空表称为"),v("strong",[s._v("空栈")]),s._v("。")]),s._v(" "),v("p",[s._v("插入元素到栈顶(表尾)的操作叫"),v("strong",[s._v("入栈")]),s._v("(压栈)")]),s._v(" "),v("p",[s._v("从栈顶(表尾)删除最后一个元素的操作称为"),v("strong",[s._v("出栈")]),s._v("(弹栈)")]),s._v(" "),v("p",[s._v('“入”压入PUSH(x) "出"弹出POP(y).')]),s._v(" "),v("p",[s._v('栈的别名："后进先出"表，反转存储器，地窖，堆栈')]),s._v(" "),v("p",[s._v("它的这个特点可用铁路调度站形象地表示")]),s._v(" "),v("p",[v("img",{attrs:{src:"/assets/1685936620693.png",alt:"1685936620693"}})]),s._v(" "),v("p",[s._v("栈的小结：")]),s._v(" "),v("p",[s._v("1.定义：限定只能在表的一端进行插入和删除操作运算的线性表(只能在栈顶操作)")]),s._v(" "),v("p",[s._v("2.逻辑结构：同线性表一样栈元素具有线性关系即前驱后继关系(一对一)")]),s._v(" "),v("p",[s._v("3.存储结构：顺序栈和链栈均可，顺序栈更常见")]),s._v(" "),v("p",[s._v("4.运算规则：只能在栈顶运算，且访问结点时依照后进后出的原则(LIFO)")]),s._v(" "),v("p",[s._v("5.实现方式：关键是编写入栈和出栈函数具体实现依顺序栈和链栈的不同而不同")]),s._v(" "),v("p",[s._v("栈和线性表唯一的区别在于"),v("strong",[s._v("运算规则")]),s._v("。线性表插入删除位置任意而栈只能对表尾(栈顶)的元素进行插入和删除操作。(后进先出的原则)")]),s._v(" "),v("p",[v("img",{attrs:{src:"/assets/1685936630768.png",alt:"1685936630768"}})]),s._v(" "),v("p",[v("img",{attrs:{src:"/assets/1685936635150.png",alt:"1685936635150"}})]),s._v(" "),v("p",[v("img",{attrs:{src:"/assets/1685936679523.png",alt:"1685936679523"}})]),s._v(" "),v("p",[v("img",{attrs:{src:"/assets/1685936683988.png",alt:"1685936683988"}})]),s._v(" "),v("p",[v("img",{attrs:{src:"/assets/1685936688928.png",alt:"1685936688928"}})]),s._v(" "),v("p",[v("img",{attrs:{src:"/assets/1685936695136.png",alt:"1685936695136"}})]),s._v(" "),v("p",[v("img",{attrs:{src:"/assets/1685936736050.png",alt:"1685936736050"}})]),s._v(" "),v("p",[v("img",{attrs:{src:"/assets/1685936745497.png",alt:"1685936745497"}})]),s._v(" "),v("p",[v("img",{attrs:{src:"/assets/1685936750963.png",alt:"1685936750963"}})]),s._v(" "),v("blockquote",[v("p",[s._v("队列")])]),s._v(" "),v("p",[s._v("队列(queue)是一种先进先出(First In First Out FIFO)的线性表。在表一端(表尾)插入，在另一端(表头)删除")]),s._v(" "),v("p",[v("img",{attrs:{src:"/assets/1685936754798.png",alt:"1685936754798"}})]),s._v(" "),v("p",[s._v("队列的总结：")]),s._v(" "),v("p",[s._v("1.定义：只能在表的一端进行插入运算在表的另一端进行删除操作运算的线性表(头删尾插)")]),s._v(" "),v("p",[s._v("2.逻辑结构：同线性表一样栈元素具有线性关系即前驱后继关系(一对一)")]),s._v(" "),v("p",[s._v("3.存储结构：顺序队和链队均可，循环顺序队更常见")]),s._v(" "),v("p",[s._v("4.运算规则：只能在队首和队尾运算，且访问结点时依照后进先出的原则(FIFO)")]),s._v(" "),v("p",[s._v("5.实现方式：关键是掌握入队和出队操作具体实现依顺序队和链队的不同而不同")]),s._v(" "),v("p",[s._v("栈和队列的区别：栈是吃进去的东西吐出来(嘴【栈顶】)队列是吃进去的东西拉出来（队首和队尾）")])])}),[],!1,null,null,null);v.default=p.exports}}]);