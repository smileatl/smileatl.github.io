(window.webpackJsonp=window.webpackJsonp||[]).push([[165],{480:function(s,t,a){"use strict";a.r(t);var n=a(7),r=Object(n.a)({},(function(){var s=this,t=s._self._c;return t("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[t("h2",{attrs:{id:"_1、哈希表的原理"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1、哈希表的原理"}},[s._v("#")]),s._v(" 1、哈希表的原理")]),s._v(" "),t("p",[s._v("哈希表（Hash Table，也叫散列表），是根据关键码值 (Key-Value) 而直接进行访问的数据结构。也就是说，它通过把关键码值映射到表中一个位置来访问记录，以加快查找的速度。哈希表的实现主要需要解决两个问题，哈希函数和冲突解决。")]),s._v(" "),t("h3",{attrs:{id:"哈希函数"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#哈希函数"}},[s._v("#")]),s._v(" 哈希函数")]),s._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v("H(keyi)=Loc(i)\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br")])]),t("p",[s._v("记录存储位置与关键字之间存在的对应关系")]),s._v(" "),t("h3",{attrs:{id:"冲突解决"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#冲突解决"}},[s._v("#")]),s._v(" 冲突解决")]),s._v(" "),t("p",[s._v("现实中的哈希函数不是完美的，当两个不同的输入值对应一个输出值时，就会产生“冲突”，")]),s._v(" "),t("p",[t("strong",[s._v("冲突")]),s._v("  不同的关键码映射到同一个散列地址，")]),s._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v("key1!=key2, 但是H(key1)=H(key2)\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br")])]),t("p",[s._v("在散列查找方法中，冲突是不可能避免的，只能进可能减少")]),s._v(" "),t("p",[s._v("常见的冲突解决方法有开放定址法，链地址法，建立公共溢出区等。实际的哈希表实现中，使用最多的是链地址法")]),s._v(" "),t("h4",{attrs:{id:"链地址法"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#链地址法"}},[s._v("#")]),s._v(" 链地址法")]),s._v(" "),t("p",[s._v("链地址法的基本思想是，为每个 Hash 值建立一个单链表，当发生冲突时，将记录插入到链表中。")]),s._v(" "),t("p",[t("img",{attrs:{src:"/assets/1691494680900.png",alt:"1691494680900"}})]),s._v(" "),t("p",[t("img",{attrs:{src:"/assets/1691494750596.png",alt:"1691494750596"}})]),s._v(" "),t("p",[t("img",{attrs:{src:"/assets/1691494774979.png",alt:"1691494774979"}})]),s._v(" "),t("h2",{attrs:{id:"_2、如何判断一个哈希表的优劣"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2、如何判断一个哈希表的优劣"}},[s._v("#")]),s._v(" 2、如何判断一个哈希表的优劣")]),s._v(" "),t("p",[s._v("判断一个哈希表的优劣可以从以下几个方面考虑：")]),s._v(" "),t("ol",[t("li",[t("p",[s._v("冲突率：冲突率是指哈希表中发生冲突的键值对数量与总键值对数量的比例。冲突率越低，说明哈希表的性能越好。可以通过计算实际冲突数与总插入数的比例来评估冲突率。低冲突率可以减少查找时间，提高哈希表的效率。")])]),s._v(" "),t("li",[t("p",[s._v("负载因子：负载因子是指哈希表中实际存储的键值对数量与哈希表大小的比例。负载因子越低，哈希表的性能越好。当负载因子过高时，冲突的概率会增加，导致查找、插入和删除的效率下降。一般来说，负载因子的合理范围是0.7到0.8之间。")])]),s._v(" "),t("li",[t("p",[s._v("哈希函数的性能：哈希函数的设计对哈希表的性能有很大影响。一个好的哈希函数应该能够将键均匀地映射到哈希表的不同位置，减少冲突的概率。同时，哈希函数的计算速度应该快，以提高哈希表的操作效率。")])]),s._v(" "),t("li",[t("p",[s._v("冲突解决方法：不同的冲突解决方法对哈希表的性能有影响。常见的冲突解决方法包括链地址法、开放地址法、再哈希法等。选择合适的冲突解决方法取决于具体的应用场景和需求。")])]),s._v(" "),t("li",[t("p",[s._v("存储空间利用率：好的哈希表应该能够充分利用存储空间。过大的存储空间会浪费内存资源，而过小的存储空间会导致冲突率增加。因此，需要根据实际需求选择适当的哈希表大小。")])]),s._v(" "),t("li",[t("p",[s._v("插入、查找和删除操作的效率：好的哈希表应该能够在常数时间内完成插入、查找和删除操作。这要求哈希函数的计算速度快，冲突率低，冲突解决方法高效。")])])]),s._v(" "),t("p",[s._v("综合考虑以上因素，可以评估一个哈希表的优劣。在实际应用中，根据具体的数据集和操作需求，选择合适的哈希函数、冲突解决方法和哈希表大小，进行性能测试和比较，以确定最佳的哈希表实现。")]),s._v(" "),t("h2",{attrs:{id:"_3、哈希表的时间复杂度为什么是o-1"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_3、哈希表的时间复杂度为什么是o-1"}},[s._v("#")]),s._v(" 3、哈希表的时间复杂度为什么是O（1）？")]),s._v(" "),t("p",[s._v("哈希表的时间复杂度为O(1)是因为它使用了一种叫做哈希函数的方法来直接计算出数据应该存储在哪个位置，而不需要逐个检查每个位置。这就像是你有一个巨大的文件柜，每个抽屉都有一个唯一的编号，你可以直接通过编号找到你需要的文件，而不需要从第一个抽屉开始逐个查找。")]),s._v(" "),t("p",[s._v("当你插入、删除或查找一个元素时，哈希表首先使用哈希函数计算出元素的哈希值，然后使用这个哈希值作为索引直接访问到数组中的相应位置。因此，这些操作的时间复杂度都是O(1)。")]),s._v(" "),t("h2",{attrs:{id:"_5、平衡二叉树结构是怎么样的"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_5、平衡二叉树结构是怎么样的"}},[s._v("#")]),s._v(" 5、平衡二叉树结构是怎么样的？")]),s._v(" "),t("p",[s._v("平衡二叉树是在二叉搜索树的基础上，平衡二叉树还需要满足如下条件:")]),s._v(" "),t("ul",[t("li",[s._v("左右两个子树的高度差（平衡因子）的绝对值不超过1")]),s._v(" "),t("li",[s._v("左右两个子树都是一棵平衡二叉树")])]),s._v(" "),t("p",[t("img",{attrs:{src:"/assets/640-1693736419437.png",alt:"图片"}})]),s._v(" "),t("p",[s._v("分析：")]),s._v(" "),t("ul",[t("li",[s._v("图一是一个平衡二叉树，它满足平衡二叉树的定义。")]),s._v(" "),t("li",[s._v("图二不是平衡二叉树，其原因并不是不满足平衡因子的条件，而是因为它不满足二叉搜索树的构成条件，这提醒我们平衡二叉树首先要是一棵二叉搜索树。")]),s._v(" "),t("li",[s._v("图三满足平衡二叉树的构成条件。")]),s._v(" "),t("li",[s._v("图 4 中的节点 (8) 平衡因子为 3，不满足平衡二叉树的要求。")])]),s._v(" "),t("h2",{attrs:{id:"_8、堆是什么"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_8、堆是什么"}},[s._v("#")]),s._v(" 8、堆是什么？")]),s._v(" "),t("p",[s._v("堆是一颗"),t("strong",[s._v("完全二叉树")]),s._v("，这样实现的堆也被称为"),t("strong",[s._v("二叉堆")]),s._v("。堆中节点的值都大于等于（或小于等于）其子节点的值，堆中如果节点的值都大于等于其子节点的值，我们把它称为"),t("strong",[s._v("大顶堆")]),s._v("，如果都小于等于其子节点的值，我们将其称为"),t("strong",[s._v("小顶堆")]),s._v("。")]),s._v(" "),t("p",[s._v("下图中，1，2 是大顶堆，3 是小顶堆， 4 不是堆（不是完全二叉树）")]),s._v(" "),t("p",[t("img",{attrs:{src:"/assets/640-1693737610983.png",alt:"图片"}})]),s._v(" "),t("h2",{attrs:{id:"_10、栈和队列-举个使用场景例子"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_10、栈和队列-举个使用场景例子"}},[s._v("#")]),s._v(" 10、栈和队列，举个使用场景例子")]),s._v(" "),t("p",[t("img",{attrs:{src:"/assets/640-1693737611039.png",alt:"图片"}})]),s._v(" "),t("ul",[t("li",[s._v("栈是一种后进先出（LIFO）的数据结构，"),t("strong",[s._v("函数的调用和返回往往使用栈来管理函数调用的顺序")]),s._v("。")]),s._v(" "),t("li",[s._v("队列是一种先进先出（FIFO）的数据结构，类似于排队等待的队伍，先到的人会先被服务。队列常用于需要先进先出的场景，例如："),t("strong",[s._v("在网络通信或磁盘读写等场景中，使用队列来管理数据的接收和发送顺序，以平衡生产者和消费者之间的速度差异")]),s._v("。")])]),s._v(" "),t("h2",{attrs:{id:"_12、二叉排序树和二分查找应用场景及原理-哪个更快"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_12、二叉排序树和二分查找应用场景及原理-哪个更快"}},[s._v("#")]),s._v(" 12、二叉排序树和二分查找应用场景及原理，哪个更快")]),s._v(" "),t("h3",{attrs:{id:"二分查找"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#二分查找"}},[s._v("#")]),s._v(" 二分查找")]),s._v(" "),t("p",[s._v("「二分查找 binary search」是一种基于分治策略的高效搜索算法。它利用数据的"),t("strong",[s._v("有序性")]),s._v("，每轮减少一半搜索范围，直至找到目标元素或搜索区间为空为止。")]),s._v(" "),t("div",{staticClass:"language-cpp line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-cpp"}},[t("code",[t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("/* 二分查找（双闭区间） */")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("binarySearch")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("vector"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("&")]),s._v("nums"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),s._v(" target"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 初始化双闭区间 [0, n-1] ，即 i, j 分别指向数组首元素、尾元素")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),s._v(" i "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" j "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" nums"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("size")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 循环，当搜索区间为空时跳出（当 i > j 时为空）")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("while")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("i "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<=")]),s._v(" j"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),s._v(" m "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" i "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("+")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("j "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),s._v(" i"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("/")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 计算中点索引 m")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("if")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("nums"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("m"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),s._v(" target"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("    "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 此情况说明 target 在区间 [m+1, j] 中")]),s._v("\n            i "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" m "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("+")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("else")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("if")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("nums"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("m"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" target"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 此情况说明 target 在区间 [i, m-1] 中")]),s._v("\n            j "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" m "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("else")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 找到目标元素，返回其索引")]),s._v("\n            "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("return")]),s._v(" m"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 未找到目标元素，返回 -1")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("return")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br"),t("span",{staticClass:"line-number"},[s._v("11")]),t("br"),t("span",{staticClass:"line-number"},[s._v("12")]),t("br"),t("span",{staticClass:"line-number"},[s._v("13")]),t("br"),t("span",{staticClass:"line-number"},[s._v("14")]),t("br"),t("span",{staticClass:"line-number"},[s._v("15")]),t("br"),t("span",{staticClass:"line-number"},[s._v("16")]),t("br"),t("span",{staticClass:"line-number"},[s._v("17")]),t("br"),t("span",{staticClass:"line-number"},[s._v("18")]),t("br")])]),t("p",[t("strong",[s._v("时间复杂度 $O(\\log n)$")]),s._v(" ：在二分循环中，区间每轮缩小一半，循环次数为 $\\log_2 n$ 。")]),s._v(" "),t("p",[t("strong",[s._v("空间复杂度 $O(1)$")]),s._v(" ：指针 $i$ 和 $j$ 使用常数大小空间。")]),s._v(" "),t("h4",{attrs:{id:"适用于"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#适用于"}},[s._v("#")]),s._v(" 适用于")]),s._v(" "),t("ul",[t("li",[s._v("仅适用于"),t("strong",[s._v("有序数据、数组")])])]),s._v(" "),t("h3",{attrs:{id:"二叉搜索树"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#二叉搜索树"}},[s._v("#")]),s._v(" 二叉搜索树")]),s._v(" "),t("ol",[t("li",[s._v("对于根节点，左子树中所有节点的值 $<$ 根节点的值 $<$ 右子树中所有节点的值。")]),s._v(" "),t("li",[s._v("任意节点的左、右子树也是二叉搜索树，即同样满足条件 "),t("code",[s._v("1.")]),s._v(" 。")])]),s._v(" "),t("p",[t("img",{attrs:{src:"/assets/binary_search_tree.png",alt:"二叉搜索树"}})]),s._v(" "),t("p",[s._v("我们将二叉搜索树封装为一个类 "),t("code",[s._v("ArrayBinaryTree")]),s._v(" ，并声明一个成员变量 "),t("code",[s._v("root")]),s._v(" ，指向树的根节点。")]),s._v(" "),t("h4",{attrs:{id:"查找节点"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#查找节点"}},[s._v("#")]),s._v(" 查找节点")]),s._v(" "),t("p",[s._v("给定目标节点值 "),t("code",[s._v("num")]),s._v(" ，可以根据二叉搜索树的性质来查找。如图 7-17 所示，我们声明一个节点 "),t("code",[s._v("cur")]),s._v(" ，从二叉树的根节点 "),t("code",[s._v("root")]),s._v(" 出发，循环比较节点值 "),t("code",[s._v("cur.val")]),s._v(" 和 "),t("code",[s._v("num")]),s._v(" 之间的大小关系。")]),s._v(" "),t("ul",[t("li",[s._v("若 "),t("code",[s._v("cur.val < num")]),s._v(" ，说明目标节点在 "),t("code",[s._v("cur")]),s._v(" 的右子树中，因此执行 "),t("code",[s._v("cur = cur.right")]),s._v(" 。")]),s._v(" "),t("li",[s._v("若 "),t("code",[s._v("cur.val > num")]),s._v(" ，说明目标节点在 "),t("code",[s._v("cur")]),s._v(" 的左子树中，因此执行 "),t("code",[s._v("cur = cur.left")]),s._v(" 。")]),s._v(" "),t("li",[s._v("若 "),t("code",[s._v("cur.val = num")]),s._v(" ，说明找到目标节点，跳出循环并返回该节点。")])]),s._v(" "),t("p",[t("strong",[s._v("二叉搜索树的查找操作与二分查找算法的工作原理一致，都是每轮排除一半情况。循环次数最多为二叉树的高度，当二叉树平衡时，使用 $O(\\log n)$ 时间")]),s._v("。")]),s._v(" "),t("div",{staticClass:"language-cpp line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-cpp"}},[t("code",[t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("/* 查找节点 */")]),s._v("\nTreeNode "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("search")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),s._v(" num"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    TreeNode "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v("cur "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" root"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 循环查找，越过叶节点后跳出")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("while")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("cur "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("!=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("nullptr")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 目标节点在 cur 的右子树中")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("if")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("cur"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("->")]),s._v("val "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),s._v(" num"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n            cur "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" cur"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("->")]),s._v("right"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 目标节点在 cur 的左子树中")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("else")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("if")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("cur"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("->")]),s._v("val "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" num"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n            cur "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" cur"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("->")]),s._v("left"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 找到目标节点，跳出循环")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("else")]),s._v("\n            "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("break")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 返回目标节点")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("return")]),s._v(" cur"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br"),t("span",{staticClass:"line-number"},[s._v("11")]),t("br"),t("span",{staticClass:"line-number"},[s._v("12")]),t("br"),t("span",{staticClass:"line-number"},[s._v("13")]),t("br"),t("span",{staticClass:"line-number"},[s._v("14")]),t("br"),t("span",{staticClass:"line-number"},[s._v("15")]),t("br"),t("span",{staticClass:"line-number"},[s._v("16")]),t("br"),t("span",{staticClass:"line-number"},[s._v("17")]),t("br"),t("span",{staticClass:"line-number"},[s._v("18")]),t("br"),t("span",{staticClass:"line-number"},[s._v("19")]),t("br")])]),t("h4",{attrs:{id:"插入节点"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#插入节点"}},[s._v("#")]),s._v(" 插入节点")]),s._v(" "),t("p",[s._v("给定一个待插入元素 "),t("code",[s._v("num")]),s._v(" ，为了保持二叉搜索树“左子树 < 根节点 < 右子树”的性质，插入操作流程如下图所示。")]),s._v(" "),t("ol",[t("li",[t("strong",[s._v("查找插入位置")]),s._v("：与查找操作相似，从根节点出发，根据当前节点值和 "),t("code",[s._v("num")]),s._v(" 的大小关系循环向下搜索，直到越过叶节点（遍历至 $\\text{None}$ ）时跳出循环。")]),s._v(" "),t("li",[t("strong",[s._v("在该位置插入节点")]),s._v("：初始化节点 "),t("code",[s._v("num")]),s._v(" ，将该节点置于 $\\text{None}$ 的位置。")])]),s._v(" "),t("p",[t("img",{attrs:{src:"/assets/bst_insert.png",alt:"在二叉搜索树中插入节点"}})]),s._v(" "),t("p",[s._v("在代码实现中，需要注意以下两点。")]),s._v(" "),t("ul",[t("li",[s._v("二叉搜索树不允许存在重复节点，否则将违反其定义。因此，若待插入节点在树中已存在，则不执行插入，直接返回。")]),s._v(" "),t("li",[s._v("为了实现插入节点，我们需要借助节点 "),t("code",[s._v("pre")]),s._v(" 保存上一轮循环的节点。这样在遍历至 $\\text{None}$ 时，我们可以获取到其父节点，从而完成节点插入操作。")])]),s._v(" "),t("div",{staticClass:"language-cpp line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-cpp"}},[t("code",[t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("/* 插入节点 */")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("void")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("insert")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),s._v(" num"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 若树为空，则初始化根节点")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("if")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("root "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("==")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("nullptr")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n        root "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("new")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("TreeNode")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("num"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("return")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n    TreeNode "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v("cur "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" root"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v("pre "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("nullptr")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 循环查找，越过叶节点后跳出")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("while")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("cur "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("!=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("nullptr")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 找到重复节点，直接返回")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("if")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("cur"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("->")]),s._v("val "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("==")]),s._v(" num"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n            "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("return")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n        pre "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" cur"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 插入位置在 cur 的右子树中")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("if")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("cur"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("->")]),s._v("val "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),s._v(" num"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n            cur "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" cur"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("->")]),s._v("right"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 插入位置在 cur 的左子树中")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("else")]),s._v("\n            cur "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" cur"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("->")]),s._v("left"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 插入节点")]),s._v("\n    TreeNode "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v("node "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("new")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("TreeNode")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("num"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("if")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("pre"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("->")]),s._v("val "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),s._v(" num"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n        pre"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("->")]),s._v("right "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" node"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("else")]),s._v("\n        pre"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("->")]),s._v("left "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" node"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br"),t("span",{staticClass:"line-number"},[s._v("11")]),t("br"),t("span",{staticClass:"line-number"},[s._v("12")]),t("br"),t("span",{staticClass:"line-number"},[s._v("13")]),t("br"),t("span",{staticClass:"line-number"},[s._v("14")]),t("br"),t("span",{staticClass:"line-number"},[s._v("15")]),t("br"),t("span",{staticClass:"line-number"},[s._v("16")]),t("br"),t("span",{staticClass:"line-number"},[s._v("17")]),t("br"),t("span",{staticClass:"line-number"},[s._v("18")]),t("br"),t("span",{staticClass:"line-number"},[s._v("19")]),t("br"),t("span",{staticClass:"line-number"},[s._v("20")]),t("br"),t("span",{staticClass:"line-number"},[s._v("21")]),t("br"),t("span",{staticClass:"line-number"},[s._v("22")]),t("br"),t("span",{staticClass:"line-number"},[s._v("23")]),t("br"),t("span",{staticClass:"line-number"},[s._v("24")]),t("br"),t("span",{staticClass:"line-number"},[s._v("25")]),t("br"),t("span",{staticClass:"line-number"},[s._v("26")]),t("br"),t("span",{staticClass:"line-number"},[s._v("27")]),t("br"),t("span",{staticClass:"line-number"},[s._v("28")]),t("br"),t("span",{staticClass:"line-number"},[s._v("29")]),t("br")])]),t("p",[s._v("与查找节点相同，插入节点使用 $O(\\log n)$ 时间。")]),s._v(" "),t("h4",{attrs:{id:"删除节点"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#删除节点"}},[s._v("#")]),s._v(" 删除节点")]),s._v(" "),t("p",[s._v("先在二叉树中查找到目标节点，再将其从二叉树中删除。")]),s._v(" "),t("p",[s._v("与插入节点类似，我们需要保证在删除操作完成后，二叉搜索树的“左子树 < 根节点 < 右子树”的性质仍然满足。")]),s._v(" "),t("p",[s._v("因此，我们需要根据目标节点的子节点数量，共分为 0、1 和 2 这三种情况，执行对应的删除节点操作。")]),s._v(" "),t("p",[s._v("如下图所示，当待删除节点的度为 $0$ 时，表示该节点是叶节点，可以直接删除。")]),s._v(" "),t("p",[t("img",{attrs:{src:"/assets/bst_remove_case1.png",alt:"在二叉搜索树中删除节点（度为 0 ）"}})]),s._v(" "),t("p",[s._v("如下图所示，当待删除节点的度为 $1$ 时，将待删除节点替换为其子节点即可。")]),s._v(" "),t("p",[t("img",{attrs:{src:"/assets/bst_remove_case2.png",alt:"在二叉搜索树中删除节点（度为 1 ）"}})]),s._v(" "),t("p",[s._v("当待删除节点的度为 $2$ 时，我们无法直接删除它，而需要使用一个节点替换该节点。由于要保持二叉搜索树“左 $<$ 根 $<$ 右”的性质，"),t("strong",[s._v("因此这个节点可以是右子树的最小节点或左子树的最大节点")]),s._v("。")]),s._v(" "),t("p",[s._v("假设我们选择右子树的最小节点（即中序遍历的下一个节点），则删除操作流程如下图所示。")]),s._v(" "),t("ol",[t("li",[s._v("找到待删除节点在“中序遍历序列”中的下一个节点，记为 "),t("code",[s._v("tmp")]),s._v(" 。")]),s._v(" "),t("li",[s._v("将 "),t("code",[s._v("tmp")]),s._v(" 的值覆盖待删除节点的值，并在树中递归删除节点 "),t("code",[s._v("tmp")]),s._v(" 。")])]),s._v(" "),t("p",[s._v("删除节点操作同样使用 $O(\\log n)$ 时间，其中查找待删除节点需要 $O(\\log n)$ 时间，获取中序遍历后继节点需要 $O(\\log n)$ 时间。")]),s._v(" "),t("div",{staticClass:"language-cpp line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-cpp"}},[t("code",[t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("/* 删除节点 */")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("void")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("remove")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),s._v(" num"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 若树为空，直接提前返回")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("if")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("root "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("==")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("nullptr")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("return")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    TreeNode "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v("cur "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" root"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v("pre "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("nullptr")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 循环查找，越过叶节点后跳出")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("while")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("cur "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("!=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("nullptr")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 找到待删除节点，跳出循环")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("if")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("cur"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("->")]),s._v("val "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("==")]),s._v(" num"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n            "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("break")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n        pre "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" cur"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 待删除节点在 cur 的右子树中")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("if")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("cur"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("->")]),s._v("val "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),s._v(" num"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n            cur "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" cur"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("->")]),s._v("right"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 待删除节点在 cur 的左子树中")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("else")]),s._v("\n            cur "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" cur"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("->")]),s._v("left"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 若无待删除节点，则直接返回")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("if")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("cur "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("==")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("nullptr")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("return")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 子节点数量 = 0 or 1")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("if")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("cur"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("->")]),s._v("left "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("==")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("nullptr")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("||")]),s._v(" cur"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("->")]),s._v("right "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("==")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("nullptr")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 当子节点数量 = 0 / 1 时， child = nullptr / 该子节点")]),s._v("\n        TreeNode "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v("child "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" cur"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("->")]),s._v("left "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("!=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("nullptr")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("?")]),s._v(" cur"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("->")]),s._v("left "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" cur"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("->")]),s._v("right"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 删除节点 cur")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("if")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("cur "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("!=")]),s._v(" root"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n            "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("if")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("pre"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("->")]),s._v("left "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("==")]),s._v(" cur"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n                pre"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("->")]),s._v("left "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" child"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n            "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("else")]),s._v("\n                pre"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("->")]),s._v("right "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" child"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("else")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n            "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 若删除节点为根节点，则重新指定根节点")]),s._v("\n            root "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" child"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 释放内存")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("delete")]),s._v(" cur"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 子节点数量 = 2")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("else")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 获取中序遍历中 cur 的下一个节点")]),s._v("\n        TreeNode "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v("tmp "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" cur"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("->")]),s._v("right"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("while")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("tmp"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("->")]),s._v("left "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("!=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("nullptr")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n            tmp "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" tmp"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("->")]),s._v("left"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),s._v(" tmpVal "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" tmp"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("->")]),s._v("val"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 递归删除节点 tmp")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("remove")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("tmp"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("->")]),s._v("val"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 用 tmp 覆盖 cur")]),s._v("\n        cur"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("->")]),s._v("val "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" tmpVal"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br"),t("span",{staticClass:"line-number"},[s._v("11")]),t("br"),t("span",{staticClass:"line-number"},[s._v("12")]),t("br"),t("span",{staticClass:"line-number"},[s._v("13")]),t("br"),t("span",{staticClass:"line-number"},[s._v("14")]),t("br"),t("span",{staticClass:"line-number"},[s._v("15")]),t("br"),t("span",{staticClass:"line-number"},[s._v("16")]),t("br"),t("span",{staticClass:"line-number"},[s._v("17")]),t("br"),t("span",{staticClass:"line-number"},[s._v("18")]),t("br"),t("span",{staticClass:"line-number"},[s._v("19")]),t("br"),t("span",{staticClass:"line-number"},[s._v("20")]),t("br"),t("span",{staticClass:"line-number"},[s._v("21")]),t("br"),t("span",{staticClass:"line-number"},[s._v("22")]),t("br"),t("span",{staticClass:"line-number"},[s._v("23")]),t("br"),t("span",{staticClass:"line-number"},[s._v("24")]),t("br"),t("span",{staticClass:"line-number"},[s._v("25")]),t("br"),t("span",{staticClass:"line-number"},[s._v("26")]),t("br"),t("span",{staticClass:"line-number"},[s._v("27")]),t("br"),t("span",{staticClass:"line-number"},[s._v("28")]),t("br"),t("span",{staticClass:"line-number"},[s._v("29")]),t("br"),t("span",{staticClass:"line-number"},[s._v("30")]),t("br"),t("span",{staticClass:"line-number"},[s._v("31")]),t("br"),t("span",{staticClass:"line-number"},[s._v("32")]),t("br"),t("span",{staticClass:"line-number"},[s._v("33")]),t("br"),t("span",{staticClass:"line-number"},[s._v("34")]),t("br"),t("span",{staticClass:"line-number"},[s._v("35")]),t("br"),t("span",{staticClass:"line-number"},[s._v("36")]),t("br"),t("span",{staticClass:"line-number"},[s._v("37")]),t("br"),t("span",{staticClass:"line-number"},[s._v("38")]),t("br"),t("span",{staticClass:"line-number"},[s._v("39")]),t("br"),t("span",{staticClass:"line-number"},[s._v("40")]),t("br"),t("span",{staticClass:"line-number"},[s._v("41")]),t("br"),t("span",{staticClass:"line-number"},[s._v("42")]),t("br"),t("span",{staticClass:"line-number"},[s._v("43")]),t("br"),t("span",{staticClass:"line-number"},[s._v("44")]),t("br"),t("span",{staticClass:"line-number"},[s._v("45")]),t("br"),t("span",{staticClass:"line-number"},[s._v("46")]),t("br"),t("span",{staticClass:"line-number"},[s._v("47")]),t("br"),t("span",{staticClass:"line-number"},[s._v("48")]),t("br"),t("span",{staticClass:"line-number"},[s._v("49")]),t("br"),t("span",{staticClass:"line-number"},[s._v("50")]),t("br"),t("span",{staticClass:"line-number"},[s._v("51")]),t("br"),t("span",{staticClass:"line-number"},[s._v("52")]),t("br"),t("span",{staticClass:"line-number"},[s._v("53")]),t("br"),t("span",{staticClass:"line-number"},[s._v("54")]),t("br")])]),t("h4",{attrs:{id:"中序遍历有序"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#中序遍历有序"}},[s._v("#")]),s._v(" 中序遍历有序")]),s._v(" "),t("p",[s._v("如下图所示，二叉树的中序遍历遵循“左 $\\rightarrow$ 根 $\\rightarrow$ 右”的遍历顺序，而二叉搜索树满足“左子节点 $<$ 根节点 $<$ 右子节点”的大小关系。")]),s._v(" "),t("p",[s._v("这意味着在二叉搜索树中进行中序遍历时，总是会优先遍历下一个最小节点，从而得出一个重要性质："),t("strong",[s._v("二叉搜索树的中序遍历序列是升序的")]),s._v("。")]),s._v(" "),t("p",[s._v("利用中序遍历升序的性质，我们在"),t("strong",[s._v("二叉搜索树中获取有序数据仅需 $O(n)$ 时间")]),s._v("，无须进行额外的排序操作，非常高效。")]),s._v(" "),t("p",[t("img",{attrs:{src:"/assets/bst_inorder_traversal.png",alt:"二叉搜索树的中序遍历序列"}})]),s._v(" "),t("h4",{attrs:{id:"二叉搜索树的效率"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#二叉搜索树的效率"}},[s._v("#")]),s._v(" 二叉搜索树的效率")]),s._v(" "),t("p",[s._v("给定一组数据，我们考虑使用数组或二叉搜索树存储。观察表 7-2 ，二叉搜索树的各项操作的时间复杂度都是对数阶，具有稳定且高效的性能表现。只有在高频添加、低频查找删除的数据适用场景下，数组比二叉搜索树的效率更高。")]),s._v(" "),t("p",[s._v("(无序数组插入时：1.空间足够：直接添加在后面，时间复杂度为O(1)  2.空间不足：整个数组移到另一个空间，再添加元素。总的时间复杂度：O(1)+O(n)=O(n))")]),s._v(" "),t("p",[t("img",{attrs:{src:"/assets/1694532168074.png",alt:"1694532168074"}})]),s._v(" "),t("p",[s._v("在理想情况下，二叉搜索树是“平衡”的，这样就可以在 log⁡n 轮循环内查找任意节点。")]),s._v(" "),t("p",[s._v("然而，如果我们在二叉搜索树中不断地插入和删除节点，可能导致二叉树退化为图 7-23 所示的链表，这时各种操作的时间复杂度也会退化为 O(n) 。")]),s._v(" "),t("p",[t("img",{attrs:{src:"/assets/bst_degradation.png",alt:"二叉搜索树的退化"}})]),s._v(" "),t("h4",{attrs:{id:"二叉搜索树常见应用"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#二叉搜索树常见应用"}},[s._v("#")]),s._v(" 二叉搜索树常见应用")]),s._v(" "),t("ul",[t("li",[s._v("用作系统中的多级索引，实现高效的查找、插入、删除操作。")]),s._v(" "),t("li",[s._v("作为某些搜索算法的底层数据结构。")]),s._v(" "),t("li",[s._v("用于存储数据流，以保持其有序状态。")])]),s._v(" "),t("h3",{attrs:{id:"适用场景"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#适用场景"}},[s._v("#")]),s._v(" 适用场景")]),s._v(" "),t("ul",[t("li",[s._v("如果你需要频繁地插入和删除元素，并且需要动态维护一个有序数据集合，BST 是更好的选择，因为它支持高效的插入和删除操作。但要注意，BST 的性能在最坏情况下可能会下降，需要额外的平衡机制来保持性能。")]),s._v(" "),t("li",[s._v("如果你只需要查找已排序数据集合中的元素，二分查找通常更快，因为它具有 O(log n) 的时间复杂度，而不受最坏情况的影响。但它不支持插入和删除操作，适用于静态数据集合。")])])])}),[],!1,null,null,null);t.default=r.exports}}]);