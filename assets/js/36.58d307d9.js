(window.webpackJsonp=window.webpackJsonp||[]).push([[36],{352:function(s,a,e){"use strict";e.r(a);var t=e(7),n=Object(t.a)({},(function(){var s=this,a=s._self._c;return a("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[a("h1",{attrs:{id:"cmake"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#cmake"}},[s._v("#")]),s._v(" CMake")]),s._v(" "),a("p",[s._v("从事于"),a("code",[s._v("linux")]),s._v("下的C++开发的人员都知道，在C++下编写程序是没有类似windows下编译器的一键编译和运行的按钮，只能由我们开发人员进行手动编译、运行；为了减免这种繁琐而且复杂的劳动力，出现了"),a("code",[s._v("makefile")]),s._v("文件，"),a("code",[s._v("makefile")]),s._v("文件可以帮助我们很快的编译大量文件，最终形成可执行文件；其实编写"),a("code",[s._v("makefile")]),s._v("文件并不是很复杂，但是后面出现了"),a("code",[s._v("cmake")]),s._v("，这个可以直接帮我们写"),a("code",[s._v("makefile")]),s._v("文件，我们只需要编写"),a("code",[s._v("cmake")]),s._v("文件即可；ws")]),s._v(" "),a("p",[s._v("CMake是一个跨平台的开源构建工具，可以用来管理C++项目的构建过程。它可以自动生成Makefile、Visual Studio等IDE所需的项目文件，从而简化了跨平台开发的过程。")]),s._v(" "),a("p",[s._v("CMake使用CMakeLists.txt文件来描述项目的构建过程，其中包含了项目的源文件、库文件、头文件等信息。通过执行CMake命令，CMake会根据CMakeLists.txt文件自动生成Makefile，然后使用Makefile来编译、链接和打包项目。")]),s._v(" "),a("p",[s._v("CMake具有很好的可移植性，支持多种操作系统和编译器，可以方便地在不同的平台上构建相同的项目。同时，CMake还支持多种构建方式，例如静态库、动态库、可执行文件等，可以根据项目的需求进行选择。")]),s._v(" "),a("p",[s._v("总的来说，CMake是一个非常强大的构建工具，可以帮助开发者简化项目的构建过程，提高开发效率。")]),s._v(" "),a("h3",{attrs:{id:"add-definitions"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#add-definitions"}},[s._v("#")]),s._v(" add_definitions()")]),s._v(" "),a("p",[s._v("add_definitions(-std=c++17)")]),s._v(" "),a("p",[a("code",[s._v("add_definitions()")]),s._v(" 是一个在 CMake 中用于添加编译器定义的命令。")]),s._v(" "),a("p",[s._v("具体而言，"),a("code",[s._v("add_definitions()")]),s._v(" 可以用来向编译器添加预定义的宏定义或符号定义。这些定义将在整个项目的编译过程中生效，并影响源代码的编译行为。")]),s._v(" "),a("p",[a("code",[s._v("add_definitions()")]),s._v(" 的语法如下：")]),s._v(" "),a("div",{staticClass:"language-cmake line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-cmake"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("add_definitions")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("-D<DEFINE"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(">")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br")])]),a("p",[s._v("其中 "),a("code",[s._v("<DEFINE>")]),s._v(" 是要添加的定义，可以是宏定义（例如 "),a("code",[s._v("-DMY_MACRO")]),s._v(") 或符号定义（例如 "),a("code",[s._v("-DSOME_SYMBOL=42")]),s._v("）。")]),s._v(" "),a("p",[s._v("示例：")]),s._v(" "),a("div",{staticClass:"language-cmake line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-cmake"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("add_definitions")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("-DMY_MACRO"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("add_definitions")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("-DSOME_SYMBOL="),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("42")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br")])]),a("p",[s._v("上述示例中，"),a("code",[s._v("-DMY_MACRO")]),s._v(" 添加了一个名为 "),a("code",[s._v("MY_MACRO")]),s._v(" 的宏定义，而 "),a("code",[s._v("-DSOME_SYMBOL=42")]),s._v(" 添加了一个名为 "),a("code",[s._v("SOME_SYMBOL")]),s._v(" 的符号定义，其值为 42。")]),s._v(" "),a("p",[s._v("通过使用 "),a("code",[s._v("add_definitions()")]),s._v(" 可以方便地向编译器添加预定义的宏定义或符号定义，从而可以在编译过程中控制源代码的编译行为，例如启用某些特定的功能、设置默认值等。")]),s._v(" "),a("p",[s._v("需要注意的是，"),a("code",[s._v("add_definitions()")]),s._v(" 添加的定义会应用于整个项目的编译过程，因此建议将其放置在适当的位置，以确保定义能够正确应用到相关的源代码文件中。")]),s._v(" "),a("h3",{attrs:{id:"add-subdirectory"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#add-subdirectory"}},[s._v("#")]),s._v(" add_subdirectory()")]),s._v(" "),a("p",[a("code",[s._v("add_subdirectory(src)")]),s._v(" 是 CMake 中的一个命令，用于向当前的 CMakeLists.txt 文件添加一个子目录。")]),s._v(" "),a("p",[s._v("在 CMake 中，一个项目通常由多个子目录组成，每个子目录包含了一组相关的源代码文件和 CMakeLists.txt 文件。"),a("code",[s._v("add_subdirectory(src)")]),s._v(' 命令的作用是告诉 CMake 在当前的 CMakeLists.txt 文件中添加名为 "src" 的子目录。')]),s._v(" "),a("p",[s._v("当 CMake 执行到 "),a("code",[s._v("add_subdirectory(src)")]),s._v(' 命令时，它会在当前目录下查找名为 "src" 的子目录，并进入该子目录执行对应的 CMakeLists.txt 文件。这样可以将子目录中的源代码文件和构建规则纳入到整个项目的构建过程中。')]),s._v(" "),a("p",[s._v("通常，"),a("code",[s._v("add_subdirectory(src)")]),s._v(" 命令会在该子目录的 CMakeLists.txt 文件中定义目标（target），包括编译选项、源代码文件、依赖项等。然后，在父目录的 CMakeLists.txt 文件中可以使用这些目标进行进一步的构建设置和链接操作。")]),s._v(" "),a("p",[s._v("以下是一个示例的项目结构：")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("project/\n├── CMakeLists.txt\n├── src/\n│   ├── CMakeLists.txt\n│   ├── main.cpp\n│   └── ...\n└── ...\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br")])]),a("p",[s._v("在项目的根目录的 CMakeLists.txt 文件中，可以使用 "),a("code",[s._v("add_subdirectory(src)")]),s._v(' 命令来添加 "src" 子目录：')]),s._v(" "),a("div",{staticClass:"language-cmake line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-cmake"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("cmake_minimum_required")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token property"}},[s._v("VERSION")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("3.0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("project")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("MyProject"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 添加子目录")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("add_subdirectory")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("src"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br")])]),a("p",[s._v('然后，在 "src" 子目录下的 CMakeLists.txt 文件中，可以定义该子目录的构建规则：')]),s._v(" "),a("div",{staticClass:"language-cmake line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-cmake"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# src/CMakeLists.txt")]),s._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 添加源代码文件")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("add_executable")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("myapp main.cpp"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 添加其他设置和依赖项")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# ...")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br")])]),a("p",[s._v("通过这种方式，CMake 可以递归地构建整个项目，包括主目录和所有子目录中的源代码文件和构建规则。这样可以更好地组织和管理大型项目的构建过程。")]),s._v(" "),a("h3",{attrs:{id:"aux-source-directory"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#aux-source-directory"}},[s._v("#")]),s._v(" aux_source_directory")]),s._v(" "),a("p",[a("code",[s._v("aux_source_directory")]),s._v("是CMake中的一个命令，用于自动收集指定目录下的源文件，并将它们存储在一个变量中。这个命令非常有用，因为它允许你自动处理一个目录中的所有源文件，而不需要逐个地手动列出文件名。")]),s._v(" "),a("p",[s._v("命令的基本语法如下：")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("aux_source_directory(<dir> <variable>)\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br")])]),a("p",[s._v("这里，"),a("code",[s._v("<dir>")]),s._v("是要扫描的目录（通常是项目的源代码目录），"),a("code",[s._v("<variable>")]),s._v("是存储扫描到源文件列表的变量名。")]),s._v(" "),a("p",[s._v("例如，如果你的CMakeLists.txt文件如下所示：")]),s._v(" "),a("div",{staticClass:"language-cmake line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-cmake"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("cmake_minimum_required")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token property"}},[s._v("VERSION")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("3.10")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("project")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("my_project"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("aux_source_directory")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("src MY_PROJECT_SRCS"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("add_executable")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("my_project "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("${")]),s._v("MY_PROJECT_SRCS"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br")])]),a("p",[s._v("这里，"),a("code",[s._v("aux_source_directory")]),s._v('命令将扫描"src"目录，将找到的所有源文件存储在名为'),a("code",[s._v("MY_PROJECT_SRCS")]),s._v("的变量中。然后"),a("code",[s._v("add_executable")]),s._v('命令使用这个变量来编译"my_project"这个可执行文件。')]),s._v(" "),a("p",[s._v("尽管"),a("code",[s._v("aux_source_directory")]),s._v("命令功能强大且方便，但它有一个缺陷：如果源代码目录结构发生变化（例如添加、重命名或删除文件），CMake可能不会自动重新运行。在这种情况下，需要手动运行"),a("code",[s._v("cmake")]),s._v("以更新项目文件。")]),s._v(" "),a("p",[s._v("另外，请注意，"),a("code",[s._v("aux_source_directory")]),s._v("命令可能没有支持子目录的扫描。如果源码结构分布在子目录中，你需要递归地使用"),a("code",[s._v("aux_source_directory")]),s._v("。尽管这在某些情况下可能有帮助，但如今更推荐使用"),a("code",[s._v("file(GLOB)")]),s._v("或"),a("code",[s._v("file(GLOB_RECURSE)")]),s._v("命令——尤其是当目录结构变得更为复杂时。")])])}),[],!1,null,null,null);a.default=n.exports}}]);