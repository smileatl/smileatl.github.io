(window.webpackJsonp=window.webpackJsonp||[]).push([[71],{387:function(t,s,a){"use strict";a.r(s);var r=a(7),e=Object(r.a)({},(function(){var t=this,s=t._self._c;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h1",{attrs:{id:"数据结构-二叉树遍历的实现"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#数据结构-二叉树遍历的实现"}},[t._v("#")]),t._v(" 数据结构——二叉树遍历的实现")]),t._v(" "),s("blockquote",[s("h1",{attrs:{id:"先序遍历的算法实现"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#先序遍历的算法实现"}},[t._v("#")]),t._v(" 先序遍历的算法实现")])]),t._v(" "),s("p",[s("img",{attrs:{src:"/assets/1685952394194.png",alt:"1685952394194"}})]),t._v(" "),s("p",[s("img",{attrs:{src:"/assets/1685952400253.png",alt:"1685952400253"}})]),t._v(" "),s("blockquote",[s("h1",{attrs:{id:"具体执行过程"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#具体执行过程"}},[t._v("#")]),t._v(" 具体执行过程")])]),t._v(" "),s("p",[s("img",{attrs:{src:"/assets/1685952412605.png",alt:"1685952412605"}})]),t._v(" "),s("p",[s("img",{attrs:{src:"/assets/1685952418622.png",alt:"1685952418622"}})]),t._v(" "),s("blockquote",[s("h1",{attrs:{id:"中序遍历的实现"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#中序遍历的实现"}},[t._v("#")]),t._v(" 中序遍历的实现")])]),t._v(" "),s("p",[s("img",{attrs:{src:"/assets/1685952426412.png",alt:"1685952426412"}})]),t._v(" "),s("p",[s("img",{attrs:{src:"/assets/1685952433850.png",alt:"1685952433850"}})]),t._v(" "),s("blockquote",[s("h1",{attrs:{id:"后序遍历的实现"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#后序遍历的实现"}},[t._v("#")]),t._v(" 后序遍历的实现")])]),t._v(" "),s("p",[s("img",{attrs:{src:"/assets/1685952443138.png",alt:"1685952443138"}})]),t._v(" "),s("p",[s("img",{attrs:{src:"/assets/1685952452365.png",alt:"1685952452365"}})]),t._v(" "),s("blockquote",[s("h1",{attrs:{id:"遍历算法分析"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#遍历算法分析"}},[t._v("#")]),t._v(" 遍历算法分析")])]),t._v(" "),s("p",[s("img",{attrs:{src:"/assets/1685952459388.png",alt:"1685952459388"}})]),t._v(" "),s("p",[s("img",{attrs:{src:"/assets/1685952473471.png",alt:"1685952473471"}})]),t._v(" "),s("p",[t._v("之前学习了二叉树的递归过遍历当然也可以用非递归的方法实现在第三章为我们知道了递归算法可以通过栈实现。二叉树非递归的遍历算法(以中序为例)反复听有点难")]),t._v(" "),s("p",[s("img",{attrs:{src:"/assets/1685952480183.png",alt:"1685952480183"}})]),t._v(" "),s("blockquote",[s("h1",{attrs:{id:"代码"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#代码"}},[t._v("#")]),t._v(" 代码：")])]),t._v(" "),s("p",[s("img",{attrs:{src:"/assets/1685952485489.png",alt:"1685952485489"}})]),t._v(" "),s("blockquote",[s("h1",{attrs:{id:"二叉树的层次遍历"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#二叉树的层次遍历"}},[t._v("#")]),t._v(" 二叉树的层次遍历")])]),t._v(" "),s("p",[s("img",{attrs:{src:"/assets/1685952493009.png",alt:"1685952493009"}})]),t._v(" "),s("blockquote",[s("h1",{attrs:{id:"设计思路"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#设计思路"}},[t._v("#")]),t._v(" 设计思路：")])]),t._v(" "),s("p",[s("img",{attrs:{src:"/assets/1685952503338.png",alt:"1685952503338"}})]),t._v(" "),s("p",[s("img",{attrs:{src:"/assets/1685952512141.png",alt:"1685952512141"}})]),t._v(" "),s("p",[s("img",{attrs:{src:"/assets/1685952517834.png",alt:"1685952517834"}})]),t._v(" "),s("p",[s("img",{attrs:{src:"/assets/1685952528623.png",alt:"1685952528623"}})]),t._v(" "),s("p",[t._v("层次遍历也可以用栈实现但比队列麻烦些不细说有兴趣下去了解")])])}),[],!1,null,null,null);s.default=e.exports}}]);