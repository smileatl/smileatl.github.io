(window.webpackJsonp=window.webpackJsonp||[]).push([[93],{410:function(s,t,a){"use strict";a.r(t);var r=a(7),v=Object(r.a)({},(function(){var s=this,t=s._self._c;return t("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[t("h1",{attrs:{id:"数据结构-插入排序2折半插入排序-希尔排序"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#数据结构-插入排序2折半插入排序-希尔排序"}},[s._v("#")]),s._v(" 数据结构——插入排序2折半插入排序+希尔排序")]),s._v(" "),t("p",[t("strong",[s._v("插入排序:")]),s._v(" 把无序的元素插入到已经有序的元素组成的序列的合适位置")]),s._v(" "),t("p",[t("strong",[s._v("直接插入排序:")]),s._v(" 把第i个元素保存到哨兵位置依次查找他插入的位置")]),s._v(" "),t("p",[s._v("以i-1开始比插入的值大向后移动，直到当前位置小于哨兵元素找到插入位置")]),s._v(" "),t("p",[s._v("查找位置是将无序的元素在有序的序列中找一个合适的位置插入到有序序列中")]),s._v(" "),t("p",[s._v("既然有序可以考虑用折半查找")]),s._v(" "),t("p",[t("img",{attrs:{src:"/assets/1685956737876.png",alt:"1685956737876"}})]),s._v(" "),t("p",[s._v("用mid和哨兵比较 mid<哨兵在左半区查找，mid>哨兵在右半区查找")]),s._v(" "),t("p",[s._v("在确定插入位置的时候用的是折半查找 对应的插入排序称之为折半插入排序")]),s._v(" "),t("blockquote",[t("h1",{attrs:{id:"折半插入排序-算法描述"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#折半插入排序-算法描述"}},[s._v("#")]),s._v(" "),t("strong",[s._v("折半插入排序----算法描述")])])]),s._v(" "),t("p",[t("img",{attrs:{src:"/assets/1685956742158.png",alt:"1685956742158"}})]),s._v(" "),t("blockquote",[t("h1",{attrs:{id:"性能分析"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#性能分析"}},[s._v("#")]),s._v(" 性能分析")])]),s._v(" "),t("p",[t("strong",[s._v("折半查找--对数级 顺序查找--O(n)")])]),s._v(" "),t("p",[t("img",{attrs:{src:"/assets/1685956746852.png",alt:"1685956746852"}})]),s._v(" "),t("p",[t("img",{attrs:{src:"/assets/1685956752454.png",alt:"1685956752454"}})]),s._v(" "),t("h1",{attrs:{id:"希尔排序"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#希尔排序"}},[s._v("#")]),s._v(" "),t("strong",[s._v("希尔排序")])]),s._v(" "),t("p",[t("img",{attrs:{src:"/assets/1685956756999.png",alt:"1685956756999"}})]),s._v(" "),t("p",[t("img",{attrs:{src:"/assets/1685956763191.png",alt:"1685956763191"}})]),s._v(" "),t("p",[s._v("1  6 11分在一组"),t("br"),s._v("\n移动一大步快速接近它的最终位置"),t("br"),s._v("\n排序完成组内有序整体看来序列基本有序"),t("br"),s._v("\n再进行3-间隔  1-间隔 直接插入排序")]),s._v(" "),t("p",[t("img",{attrs:{src:"/assets/1685956770410.png",alt:"1685956770410"}})]),s._v(" "),t("p",[t("img",{attrs:{src:"/assets/1685956774967.png",alt:"1685956774967"}})]),s._v(" "),t("p",[t("img",{attrs:{src:"/assets/1685956779918.png",alt:"1685956779918"}})]),s._v(" "),t("p",[t("img",{attrs:{src:"/assets/1685956785160.png",alt:"1685956785160"}})]),s._v(" "),t("p",[s._v("dk值依次存在data[t]中")]),s._v(" "),t("p",[t("img",{attrs:{src:"/assets/1685956791397.png",alt:"1685956791397"}})]),s._v(" "),t("p",[t("strong",[s._v("本质上还是直接插入排序只不过元素的间隔不是1修改的地方j--改为j=j-dk  移动的目的地对应修改")])]),s._v(" "),t("p",[t("img",{attrs:{src:"/assets/1685956798402.png",alt:"1685956798402"}})]),s._v(" "),t("p",[t("img",{attrs:{src:"/assets/1685956802973.png",alt:"1685956802973"}})]),s._v(" "),t("p",[s._v("希尔排序法是一种==不稳定==的排序算法")]),s._v(" "),t("p",[t("img",{attrs:{src:"/assets/1685956807638.png",alt:"1685956807638"}})]),s._v(" "),t("p",[t("strong",[s._v("链式不好找间隔为dk的元素还得一个个找，不如顺序查找")])])])}),[],!1,null,null,null);t.default=v.exports}}]);