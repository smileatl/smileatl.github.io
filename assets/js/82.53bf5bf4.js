(window.webpackJsonp=window.webpackJsonp||[]).push([[82],{399:function(s,t,a){"use strict";a.r(t);var v=a(7),r=Object(v.a)({},(function(){var s=this,t=s._self._c;return t("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[t("h1",{attrs:{id:"数据结构-图的应用2最短路径"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#数据结构-图的应用2最短路径"}},[s._v("#")]),s._v(" 数据结构——图的应用2最短路径")]),s._v(" "),t("p",[t("img",{attrs:{src:"/assets/1685954600729.png",alt:"1685954600729"}})]),s._v(" "),t("p",[t("img",{attrs:{src:"/assets/1685954606149.png",alt:"1685954606149"}})]),s._v(" "),t("p",[t("img",{attrs:{src:"/assets/1685954611751.png",alt:"1685954611751"}})]),s._v(" "),t("p",[s._v("最短路径问题不用包含所有的顶点，最小生成树问题需要包含所有的顶点")]),s._v(" "),t("p",[t("img",{attrs:{src:"/assets/1685954620469.png",alt:"1685954620469"}})]),s._v(" "),t("p",[s._v("有向图")]),s._v(" "),t("p",[t("img",{attrs:{src:"/assets/1685954625945.png",alt:"1685954625945"}})]),s._v(" "),t("p",[t("img",{attrs:{src:"/assets/1685954637496.png",alt:"1685954637496"}})]),s._v(" "),t("p",[t("img",{attrs:{src:"/assets/1685954645292.png",alt:"1685954645292"}})]),s._v(" "),t("p",[t("img",{attrs:{src:"/assets/1685954670225.png",alt:"1685954670225"}})]),s._v(" "),t("p",[s._v("【小声bb】")]),s._v(" "),t("p",[s._v("如果v0不是直达v2，而是经过其他点(vk)到达v2路径长度是至少两条边的长度【（v0，vk）+其余边的长度】（v0，vk）边已经大于v0v2长度再加一条边更大了所以还是直达的路径短")]),s._v(" "),t("p",[s._v("接下来就比较从v0直接到达各个顶点的长度和v0经v2到达各个顶点的路径长度如果后者比较小则修改对应的值")]),s._v(" "),t("p",[t("img",{attrs:{src:"/assets/1685954744023.png",alt:"1685954744023"}})])])}),[],!1,null,null,null);t.default=r.exports}}]);