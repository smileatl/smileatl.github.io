(window.webpackJsonp=window.webpackJsonp||[]).push([[215],{532:function(t,s,a){"use strict";a.r(s);var n=a(7),e=Object(n.a)({},(function(){var t=this,s=t._self._c;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h1",{attrs:{id:"实现顺序"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#实现顺序"}},[t._v("#")]),t._v(" 实现顺序")]),t._v(" "),s("h2",{attrs:{id:"分配器allocator"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#分配器allocator"}},[t._v("#")]),t._v(" 分配器allocator")]),t._v(" "),s("p",[t._v("我们先实现一个空间配置器，用于管理内存的分配回收，对象的构造析构。毕竟你要数据，就要给内存它放。有些童鞋可能会看到 SGI STL 中的实现，用的是内存池，什么自由链表，什么管理内存碎片……哦嚯听起来好x啊！我一开始也是这么做的，直到非常后来才发现这样"),s("strong",[t._v("并无卵用")]),t._v("啊！！具体原因不在这里详细谈，只简单的讲一讲。因为用内存池很容易不释放内存还给系统，你会说不是大于xxxx bytes就调用 malloc/free 的吗？这个是这样的没错，但是还有很多是基于 node type 的容器，比如 "),s("code",[t._v("list")]),t._v(" / "),s("code",[t._v("set")]),t._v(" / "),s("code",[t._v("map")]),t._v(" / "),s("code",[t._v("unordered_*")]),t._v(" 等，而它们的 node 的大小并不是都一样的，所以不能完全复用，于是还是会分配一大堆的小内存，然后释放不了，全部都堆在池子里面。所以我原来测试的时候内存动不动就上几个G，后来实在是忍受不了内存池的破事了，于是弃用了。直接 new / delete，结果发现，性能反而好了不少……而且，现代的C++标准实现全部都是这样做的，你也不需要有什么疑虑了。因此这个部分，应该很快就可以完成。")]),t._v(" "),s("h2",{attrs:{id:"迭代器iterator"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#迭代器iterator"}},[t._v("#")]),t._v(" 迭代器iterator")]),t._v(" "),s("p",[t._v("做完了 Allocator，我推荐先把迭代器的几种类型，以及迭代器的类型萃取呀，和 "),s("code",[t._v("advance")]),t._v(", "),s("code",[t._v("distance")]),t._v(" 等常用函数。因为迭代器是算法与容器之间的“粘合剂”，无论是我们的算法还是容器，都是基于迭代器的。所以要先把迭代器的概念做出来。这里就用到了 STL 中常用的 tag 技巧，声明一些空类型，这些类型可以利用模板类型推导，来帮助我们识别我们想要的东西。标准的要求可以看 "),s("a",{attrs:{href:"http://en.cppreference.com/w/cpp/iterator",target:"_blank",rel:"noopener noreferrer"}},[t._v("这里"),s("OutboundLink")],1),t._v("，具体实现可以参考一下 "),s("a",{attrs:{href:"https://github.com/llvm-mirror/libcxx/blob/master/include/iterator#L441",target:"_blank",rel:"noopener noreferrer"}},[t._v("这里"),s("OutboundLink")],1),t._v(" 的技巧。")]),t._v(" "),s("h2",{attrs:{id:"基础函数"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#基础函数"}},[t._v("#")]),t._v(" 基础函数")]),t._v(" "),s("p",[t._v("然后我推荐先实现一部分基础函数，因为这一部分的函数的使用频率非常的高，要实现容器也是离不开它们的，所以如何实现好这一部分基础函数是非常关键的。主要的我列出来一些：")]),t._v(" "),s("p",[s("strong",[t._v("修改未初始化的空间：")])]),t._v(" "),s("ul",[s("li",[t._v("uninitialized_copy")]),t._v(" "),s("li",[t._v("uninitialized_copy_n")]),t._v(" "),s("li",[t._v("uninitialized_fill")]),t._v(" "),s("li",[t._v("uninitialized_fill_n")]),t._v(" "),s("li",[t._v("uninitialized_move")]),t._v(" "),s("li",[t._v("uninitialized_move_n")])]),t._v(" "),s("p",[s("strong",[t._v("修改已初始化的空间：")])]),t._v(" "),s("ul",[s("li",[t._v("copy")]),t._v(" "),s("li",[t._v("copy_backward")]),t._v(" "),s("li",[t._v("move")]),t._v(" "),s("li",[t._v("move_backward")]),t._v(" "),s("li",[t._v("fill")]),t._v(" "),s("li",[t._v("fill_n")])]),t._v(" "),s("p",[s("strong",[t._v("其它常用的：")])]),t._v(" "),s("ul",[s("li",[t._v("swap")]),t._v(" "),s("li",[t._v("min")]),t._v(" "),s("li",[t._v("max")])]),t._v(" "),s("p",[t._v("能先把这些实现出来就差不多了，还有一些在容器中也会用到的比如 "),s("code",[t._v("reverse")]),t._v(", "),s("code",[t._v("make_heap")]),t._v(", "),s("code",[t._v("sort_heap")]),t._v(" 等，可以用到的时候再去实现。")]),t._v(" "),s("p",[t._v("然后你可以先尝试自己先按照自己的理解实现一遍，比如 uninitialized_copy，刚开始，思路会比较单纯，就是给 [first, last) 构造一个值，可能会写成这样（当然你可以写得更好）：")]),t._v(" "),s("div",{staticClass:"language-cpp line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-cpp"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("template")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("typename")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("InputIterator")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("typename")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("ForwardIterator")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("\nInputIterator\n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("uninitialized_copy")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("InputIterator first"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" InputIterator last"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" ForwardIterator result"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" first "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!=")]),t._v(" last"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),t._v("first"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),t._v("result"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\t\t"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("construct")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("result"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("first"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\t"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" result"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br"),s("span",{staticClass:"line-number"},[t._v("5")]),s("br"),s("span",{staticClass:"line-number"},[t._v("6")]),s("br"),s("span",{staticClass:"line-number"},[t._v("7")]),s("br"),s("span",{staticClass:"line-number"},[t._v("8")]),s("br")])]),s("p",[t._v("然而你去看看主流标准库的实现，会发现跟你的差别非常巨大！比如看 "),s("a",{attrs:{href:"https://github.com/llvm-mirror/libcxx/blob/master/include/memory#L3120",target:"_blank",rel:"noopener noreferrer"}},[t._v("libcxx"),s("OutboundLink")],1),t._v(" 的：")]),t._v(" "),s("div",{staticClass:"language-cpp line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-cpp"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("template")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("_InputIterator")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("_ForwardIterator")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("\n_ForwardIterator\n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("uninitialized_copy")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("_InputIterator __f"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" _InputIterator __l"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" _ForwardIterator __r"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("typedef")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("typename")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("iterator_traits")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("_ForwardIterator"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),s("span",{pre:!0,attrs:{class:"token double-colon punctuation"}},[t._v("::")]),t._v("value_type value_type"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token macro property"}},[s("span",{pre:!0,attrs:{class:"token directive-hash"}},[t._v("#")]),s("span",{pre:!0,attrs:{class:"token directive keyword"}},[t._v("ifndef")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token expression"}},[t._v("_LIBCPP_NO_EXCEPTIONS")])]),t._v("\n    _ForwardIterator __s "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" __r"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("try")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token macro property"}},[s("span",{pre:!0,attrs:{class:"token directive-hash"}},[t._v("#")]),s("span",{pre:!0,attrs:{class:"token directive keyword"}},[t._v("endif")])]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" __f "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!=")]),t._v(" __l"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),t._v("__f"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),t._v("__r"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n            "),s("span",{pre:!0,attrs:{class:"token double-colon punctuation"}},[t._v("::")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token generic-function"}},[s("span",{pre:!0,attrs:{class:"token function"}},[t._v("static_cast")]),s("span",{pre:!0,attrs:{class:"token generic class-name"}},[s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")])])]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("_VSTD"),s("span",{pre:!0,attrs:{class:"token double-colon punctuation"}},[t._v("::")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("addressof")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("__r"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("value_type")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("__f"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token macro property"}},[s("span",{pre:!0,attrs:{class:"token directive-hash"}},[t._v("#")]),s("span",{pre:!0,attrs:{class:"token directive keyword"}},[t._v("ifndef")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token expression"}},[t._v("_LIBCPP_NO_EXCEPTIONS")])]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("catch")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" __s "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!=")]),t._v(" __r"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),t._v("__s"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n            __s"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("~")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("value_type")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("throw")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token macro property"}},[s("span",{pre:!0,attrs:{class:"token directive-hash"}},[t._v("#")]),s("span",{pre:!0,attrs:{class:"token directive keyword"}},[t._v("endif")])]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" __r"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br"),s("span",{staticClass:"line-number"},[t._v("5")]),s("br"),s("span",{staticClass:"line-number"},[t._v("6")]),s("br"),s("span",{staticClass:"line-number"},[t._v("7")]),s("br"),s("span",{staticClass:"line-number"},[t._v("8")]),s("br"),s("span",{staticClass:"line-number"},[t._v("9")]),s("br"),s("span",{staticClass:"line-number"},[t._v("10")]),s("br"),s("span",{staticClass:"line-number"},[t._v("11")]),s("br"),s("span",{staticClass:"line-number"},[t._v("12")]),s("br"),s("span",{staticClass:"line-number"},[t._v("13")]),s("br"),s("span",{staticClass:"line-number"},[t._v("14")]),s("br"),s("span",{staticClass:"line-number"},[t._v("15")]),s("br"),s("span",{staticClass:"line-number"},[t._v("16")]),s("br"),s("span",{staticClass:"line-number"},[t._v("17")]),s("br"),s("span",{staticClass:"line-number"},[t._v("18")]),s("br"),s("span",{staticClass:"line-number"},[t._v("19")]),s("br"),s("span",{staticClass:"line-number"},[t._v("20")]),s("br"),s("span",{staticClass:"line-number"},[t._v("21")]),s("br"),s("span",{staticClass:"line-number"},[t._v("22")]),s("br"),s("span",{staticClass:"line-number"},[t._v("23")]),s("br")])]),s("p",[t._v("这个 new 是什么用法？为什么要用 "),s("code",[t._v("addressof")]),t._v("？for 循环里面 "),s("code",[t._v("++__r")]),t._v(" 前面为什么要有 "),s("code",[t._v("(void)")]),t._v(" ？以及异常的使用。你才会发现，原来需要考虑的地方还真多。你别说，这些问题还真的是有原因的，贴两个连接：")]),t._v(" "),s("blockquote",[s("p",[s("a",{attrs:{href:"https://stackoverflow.com/questions/32680208/is-there-any-advantage-of-using-stdaddressof-function-template-instead-of-us",target:"_blank",rel:"noopener noreferrer"}},[t._v("https://stackoverflow.com/questions/32680208/is-there-any-advantage-of-using-stdaddressof-function-template-instead-of-us"),s("OutboundLink")],1),t._v(" "),s("a",{attrs:{href:"https://github.com/Alinshans/LCPP/blob/master/Note/other.md",target:"_blank",rel:"noopener noreferrer"}},[t._v("https://github.com/Alinshans/LCPP/blob/master/Note/other.md"),s("OutboundLink")],1)])]),t._v(" "),s("p",[t._v("所以啊，遇到什么问题，首先应该自己去搜索，学会搜索是很重要的。尤其是掌握 "),s("a",{attrs:{href:"https://stackoverflow.com/",target:"_blank",rel:"noopener noreferrer"}},[t._v("stack overflow"),s("OutboundLink")],1),t._v(" 和 "),s("a",{attrs:{href:"https://www.google.com/",target:"_blank",rel:"noopener noreferrer"}},[t._v("google"),s("OutboundLink")],1),t._v(" 的使用。")]),t._v(" "),s("p",[t._v("以上我列出来的那些函数，实现都不简单，但是你去看了某个的实现，其它的都可以照猫画瓢。")]),t._v(" "),s("h2",{attrs:{id:"容器"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#容器"}},[t._v("#")]),t._v(" 容器")]),t._v(" "),s("p",[t._v("真的是万事开头难，若不是有经验，第一次都是无从下手，或者写的很糟糕的。我们已经把一些基础的东西写好了，接下来可以实现一些容器了！")]),t._v(" "),s("p",[t._v("要实现一个容器，最重要是要理解其中的数据结构以及添加删除时的操作。一个容器是如何存放数据、如何访问数据、如何添加与删除数据的，这些在脑海里面，都要有个大致的过程。其次要明白，这个容器的要求是什么。比如 "),s("code",[t._v("vector")]),t._v(" 容器，要满足 "),s("a",{attrs:{href:"http://en.cppreference.com/w/cpp/concept/ContiguousContainer",target:"_blank",rel:"noopener noreferrer"}},[t._v("ContiguousContainer"),s("OutboundLink")],1),t._v("，迭代器要符合 "),s("a",{attrs:{href:"http://en.cppreference.com/w/cpp/concept/RandomAccessIterator",target:"_blank",rel:"noopener noreferrer"}},[t._v("RandomAccessIterator"),s("OutboundLink")],1),t._v("，它各种操作，要满足什么样子的时间复杂度。")]),t._v(" "),s("p",[t._v("还有提一下，要不要支持用户自定义分配器(user-defined allocator)是你的选择，支持了破事多一点而已，这不是我的重点，所以我没有支持。")]),t._v(" "),s("p",[t._v("我们可以先从 "),s("code",[t._v("vector")]),t._v(" 开始，实现基本的功能，然后逐步扩展。"),s("code",[t._v("vector")]),t._v(" 内部并不复杂，就是有一段分配得到的空间，然后我们记录已经使用过的空间，若插入时剩余可用空间够大，就直接插入，否则我们就重新开一个更大的空间，并把原来的数据搬过去，然后再插入。那么你可以选择用“三指针”的形式，也可以使用一个指针+两个大小的形式。我就选择前者吧。我们先把大的框架写出来：")]),t._v(" "),s("div",{staticClass:"language-cpp line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-cpp"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("template")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("typename")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("T")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Vector")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v("\n\t"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// typedefs ...")]),t._v("\n\t"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("typedef")]),t._v(" T"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("       iterator"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\t"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("typedef")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" T"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" const_iterator"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\t"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// typedefs ...")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("private")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v("\n\titerator _begin"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("  "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 指向当前数据的起始位置")]),t._v("\n\titerator _end"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 指向当前数据的结束位置")]),t._v("\n\titerator _cap"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 指向可用空间的结束位置")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v("\n\titerator "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("begin")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" _begin"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\titerator "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("end")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("   "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" _end"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n\t"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// ...")]),t._v("\n\n\t"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("push_back")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\t"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("pop_back")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n\titerator "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("insert")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("const_iterator pos"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" T"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v(" value"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n\titerator "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("erase")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("const_iterator pos"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n\t"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// ...")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br"),s("span",{staticClass:"line-number"},[t._v("5")]),s("br"),s("span",{staticClass:"line-number"},[t._v("6")]),s("br"),s("span",{staticClass:"line-number"},[t._v("7")]),s("br"),s("span",{staticClass:"line-number"},[t._v("8")]),s("br"),s("span",{staticClass:"line-number"},[t._v("9")]),s("br"),s("span",{staticClass:"line-number"},[t._v("10")]),s("br"),s("span",{staticClass:"line-number"},[t._v("11")]),s("br"),s("span",{staticClass:"line-number"},[t._v("12")]),s("br"),s("span",{staticClass:"line-number"},[t._v("13")]),s("br"),s("span",{staticClass:"line-number"},[t._v("14")]),s("br"),s("span",{staticClass:"line-number"},[t._v("15")]),s("br"),s("span",{staticClass:"line-number"},[t._v("16")]),s("br"),s("span",{staticClass:"line-number"},[t._v("17")]),s("br"),s("span",{staticClass:"line-number"},[t._v("18")]),s("br"),s("span",{staticClass:"line-number"},[t._v("19")]),s("br"),s("span",{staticClass:"line-number"},[t._v("20")]),s("br"),s("span",{staticClass:"line-number"},[t._v("21")]),s("br"),s("span",{staticClass:"line-number"},[t._v("22")]),s("br"),s("span",{staticClass:"line-number"},[t._v("23")]),s("br"),s("span",{staticClass:"line-number"},[t._v("24")]),s("br"),s("span",{staticClass:"line-number"},[t._v("25")]),s("br"),s("span",{staticClass:"line-number"},[t._v("26")]),s("br"),s("span",{staticClass:"line-number"},[t._v("27")]),s("br"),s("span",{staticClass:"line-number"},[t._v("28")]),s("br"),s("span",{staticClass:"line-number"},[t._v("29")]),s("br")])]),s("p",[t._v("再大的东西，也是由一点点小的东西堆砌起来的。再复杂的系统，也是由一个一个模块实现起来的。再复杂的类，也是由一个一个函数实现起来的。所以只要开始了，其实并不难。并不需要一步到位，功能都是一步一步加上去的。可以对照着 "),s("a",{attrs:{href:"http://en.cppreference.com/w/cpp/container",target:"_blank",rel:"noopener noreferrer"}},[t._v("这里"),s("OutboundLink")],1),t._v(" 的接口说明，慢慢地去添加接口，完善接口，甚至是完善范围检查，异常安全等方面的内容。")]),t._v(" "),s("p",[t._v("当然自己没有任何参考写出来不是一件简单的事情，你很难考虑的周全。所以我也参考了非常多 "),s("code",[t._v("msvc")]),t._v("、"),s("code",[t._v("libstdc++")]),t._v(" 还有 "),s("code",[t._v("libcxx")]),t._v(" 的实现，个人认为阅读这些实现也是一种学习的方法。当然不可以直接照着就抄，而是要多问为什么。为什么要这么实现，不这么实现会怎么样。很多你看似没什么用的操作，其实背后都是有原因的。比如 "),s("code",[t._v("vector")]),t._v(" 内存增长的策略，比如 "),s("a",{attrs:{href:"https://github.com/Alinshans/LCPP/blob/master/Note/STL/vector.md#1-why-some-functions-like-insert_aux-need-a-x_copy",target:"_blank",rel:"noopener noreferrer"}},[t._v("这个问题"),s("OutboundLink")],1),t._v("，你都需要多提问，多思考，才能有较深刻的理解。而据我的体验，我推荐参考 "),s("a",{attrs:{href:"https://github.com/Alinshans/LCPP/blob/master/Note/STL/vector.md#1-why-some-functions-like-insert_aux-need-a-x_copy",target:"_blank",rel:"noopener noreferrer"}},[t._v("libcxx"),s("OutboundLink")],1),t._v(" 的实现，因为它目录结构清晰，代码风格较易阅读，性能更好。")]),t._v(" "),s("p",[t._v("每个容器，接口风格都是差不多的，认认真真实现完第一个之后，后面的就轻车熟路了，当然提前还是一样，要对容器的数据结构熟悉。")]),t._v(" "),s("h2",{attrs:{id:"考虑更多"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#考虑更多"}},[t._v("#")]),t._v(" 考虑更多")]),t._v(" "),s("p",[t._v("大致完成之后，如果你还有兴趣，那么还可以考虑更多，如果你觉得到此为止了，那也没有什么所谓，全看你自己的目的。大概还有那些需要考虑的呢？我罗列一些，自己看着办：")]),t._v(" "),s("ul",[s("li",[t._v("特化 "),s("code",[t._v("vector<bool>")]),t._v(" ?")]),t._v(" "),s("li",[t._v("异常安全")]),t._v(" "),s("li",[t._v("优化")]),t._v(" "),s("li",[t._v("单元测试")]),t._v(" "),s("li",[t._v("与标准库的交互")]),t._v(" "),s("li",[t._v("……")])]),t._v(" "),s("h3",{attrs:{id:"重构"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#重构"}},[t._v("#")]),t._v(" 重构")]),t._v(" "),s("p",[t._v("重构是在所难免的。可能是代码风格混乱，可能是隔一段时间回头看之前写的代码就像一坨*，可能是优化实现，可能是接口扩展。我从第一次写完，到现在，也进行了三次大重构。")]),t._v(" "),s("p",[t._v("重构是一个比较大的话题。以后有机会会详细谈谈，限于篇幅，我这里只简单地谈一下针对这个项目，重构的一些策略。")]),t._v(" "),s("ol",[s("li",[t._v("如何放心大胆的重构")])]),t._v(" "),s("p",[t._v("这就体现了单元测试的重要性了。有了单元测试，你才敢放心大胆的重构，当然提前是你单元测试的覆盖率要达到。重构完之后跑一遍单元测试，心里也有点底。")]),t._v(" "),s("ol",[s("li",[t._v("如何重构")])]),t._v(" "),s("p",[t._v("根据我的经验，重构的时候尽量不要直接在原来的函数上进行改动，除非是一些小修改。因为很容易你没改好，然后原来的又乱掉了，就很麻烦。所以我建议是用这样的方法：")]),t._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("#if 0\nvoid 原来的函数()\n{\n\t// ...\t\n}\n// 还有其它相关的函数\n#elif\nvoid 这里是重构的函数()\n{\n\t// ...\n}\n#endif\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br"),s("span",{staticClass:"line-number"},[t._v("5")]),s("br"),s("span",{staticClass:"line-number"},[t._v("6")]),s("br"),s("span",{staticClass:"line-number"},[t._v("7")]),s("br"),s("span",{staticClass:"line-number"},[t._v("8")]),s("br"),s("span",{staticClass:"line-number"},[t._v("9")]),s("br"),s("span",{staticClass:"line-number"},[t._v("10")]),s("br"),s("span",{staticClass:"line-number"},[t._v("11")]),s("br"),s("span",{staticClass:"line-number"},[t._v("12")]),s("br")])]),s("p",[t._v("在要重构的函数旁边，重新写，然后用 "),s("code",[t._v("#if")]),t._v(" 来控制使用原来的函数还是重构后的函数，等完全重构好之后测试过之后再删除原来的。")])])}),[],!1,null,null,null);s.default=e.exports}}]);