(window.webpackJsonp=window.webpackJsonp||[]).push([[189],{507:function(t,s,a){"use strict";a.r(s);var n=a(7),e=Object(n.a)({},(function(){var t=this,s=t._self._c;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h2",{attrs:{id:"_1、介绍一下你的项目"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1、介绍一下你的项目"}},[t._v("#")]),t._v(" 1、介绍一下你的项目")]),t._v(" "),s("p",[t._v("本项目是一个基于多Reactor 模型的多线程网络库。项目的主体是参考muduo网络库实现，使用 C++ 的标准特性来进行了重构，去除掉了网络库对 boost 的依赖。")]),t._v(" "),s("p",[t._v("这个网络库采用一个事件循环一个线程的线程模型，并采用EPOLL和非阻塞IO实现了一个多Reactor模型。")]),t._v(" "),s("p",[t._v("在muduo中，每一个线程都可以看作是一个Reactor，主线程（主Reactor）只负责监听接收新连接，并将接收的连接对应的fd分发到子Reactor中，子线程（子Reactor）就负责处理主线程分发给自己的fd上的事件，比如fd上发生的可读、可写、错误等事件，另外从fd上读取数据后，要进行的业务逻辑也是由子线程负责的。基本框架如下图所示：")]),t._v(" "),s("p",[s("img",{attrs:{src:"/assets/1694258828440.png",alt:"1694258828440"}})]),t._v(" "),s("p",[t._v("项目已经实现了Channel模块、Poller模块、事件循环模块、缓冲区、异步日志、定时器、数据库连接池。")]),t._v(" "),s("p",[t._v("内部实现了一个小型的 HTTP 服务器，可支持 GET 请求和静态资源的访问，且附有异步日志监控服务端情况。还有sudoku服务器、echo服务器。")]),t._v(" "),s("h2",{attrs:{id:"_2、个人收获"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2、个人收获"}},[t._v("#")]),t._v(" 2、个人收获")]),t._v(" "),s("p",[t._v("能更加熟练地运用"),s("strong",[t._v("C++11新特性")]),t._v("，如bind、智能指针和原子变量等语法，同时我对于"),s("strong",[t._v("one loop per thread + nonblocking IO")]),t._v("网络模型的理解得到了提升。")]),t._v(" "),s("p",[t._v("此外，在编码中对类的封装和设计的实践，让我对设计模式、"),s("strong",[t._v("基于事件驱动的编程方法以及事件回调")]),t._v("有了更具体的认识。")]),t._v(" "),s("h2",{attrs:{id:"_2、你从这个项目里学到了哪些c-的特性"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2、你从这个项目里学到了哪些c-的特性"}},[t._v("#")]),t._v(" 2、你从这个项目里学到了哪些C++的特性")]),t._v(" "),s("h3",{attrs:{id:"智能指针"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#智能指针"}},[t._v("#")]),t._v(" 智能指针")]),t._v(" "),s("h3",{attrs:{id:"原子变量"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#原子变量"}},[t._v("#")]),t._v(" 原子变量")]),t._v(" "),s("p",[s("code",[t._v("std::atomic_int")]),t._v(" 是 C++ 标准库中的一个原子整型类型，用于"),s("strong",[t._v("支持原子操作。它提供了一种线程安全的方式来对整数进行操作，确保多个线程可以同时访问和修改这个整数值而不会发生数据竞争")]),t._v("。")]),t._v(" "),s("p",[t._v("原子操作是不可中断的，即使在多线程环境下也能保证操作的完整性。"),s("code",[t._v("std::atomic_int")]),t._v(" 类型通过"),s("strong",[t._v("使用硬件原子指令或锁机制来实现原子性")]),t._v("，以确保所有操作都是原子的，无论是否存在其他线程同时访问该变量。")]),t._v(" "),s("p",[t._v("以下是 "),s("code",[t._v("std::atomic_int")]),t._v(" 的一些重要特性和使用方法：")]),t._v(" "),s("ul",[s("li",[t._v("支持原子操作："),s("code",[t._v("std::atomic_int")]),t._v(" 支持一系列的原子操作，如加载（load）、存储（store）、交换（exchange）、比较交换（compare_exchange_weak、compare_exchange_strong）等。这些操作可以确保并发访问时的正确性。")]),t._v(" "),s("li",[t._v("线程安全："),s("code",[t._v("std::atomic_int")]),t._v(" 提供了"),s("strong",[t._v("线程安全的操作，无需额外的同步手段（例如互斥锁）。多个线程可以同时读取和写入 "),s("code",[t._v("std::atomic_int")]),t._v(" 对象，而不会导致数据竞争")]),t._v("。")]),t._v(" "),s("li",[t._v("原子性："),s("code",[t._v("std::atomic_int")]),t._v(" 操作的结果要么完全被一个线程看到，要么完全不被任何线程看到。这意味着所有操作都是原子的，不会发生部分修改或数据错误。")]),t._v(" "),s("li",[t._v("内存顺序（Memory Order）："),s("code",[t._v("std::atomic_int")]),t._v(" 操作提供了内存顺序的控制，以确保对多个原子操作之间的顺序进行指定。可以使用不同的内存顺序参数来平衡性能和一致性需求。")])]),t._v(" "),s("p",[t._v("下面是一个简单的示例，展示如何使用 "),s("code",[t._v("std::atomic_int")]),t._v("：")]),t._v(" "),s("div",{staticClass:"language-cpp line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-cpp"}},[s("code",[s("span",{pre:!0,attrs:{class:"token macro property"}},[s("span",{pre:!0,attrs:{class:"token directive-hash"}},[t._v("#")]),s("span",{pre:!0,attrs:{class:"token directive keyword"}},[t._v("include")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("<iostream>")])]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token macro property"}},[s("span",{pre:!0,attrs:{class:"token directive-hash"}},[t._v("#")]),s("span",{pre:!0,attrs:{class:"token directive keyword"}},[t._v("include")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("<atomic>")])]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("main")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    std"),s("span",{pre:!0,attrs:{class:"token double-colon punctuation"}},[t._v("::")]),t._v("atomic_int "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("atomicValue")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n    atomicValue"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("store")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("42")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("  "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 存储新值")]),t._v("\n\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" loadedValue "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" atomicValue"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("load")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("  "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 加载当前值")]),t._v("\n    std"),s("span",{pre:!0,attrs:{class:"token double-colon punctuation"}},[t._v("::")]),t._v("cout "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<<")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Loaded value: "')]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<<")]),t._v(" loadedValue "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<<")]),t._v(" std"),s("span",{pre:!0,attrs:{class:"token double-colon punctuation"}},[t._v("::")]),t._v("endl"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("bool")]),t._v(" exchanged "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" atomicValue"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("compare_exchange_weak")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("42")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("13")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("exchanged"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        std"),s("span",{pre:!0,attrs:{class:"token double-colon punctuation"}},[t._v("::")]),t._v("cout "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<<")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Value exchanged successfully."')]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<<")]),t._v(" std"),s("span",{pre:!0,attrs:{class:"token double-colon punctuation"}},[t._v("::")]),t._v("endl"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("else")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        std"),s("span",{pre:!0,attrs:{class:"token double-colon punctuation"}},[t._v("::")]),t._v("cout "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<<")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Failed to exchange value."')]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<<")]),t._v(" std"),s("span",{pre:!0,attrs:{class:"token double-colon punctuation"}},[t._v("::")]),t._v("endl"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br"),s("span",{staticClass:"line-number"},[t._v("5")]),s("br"),s("span",{staticClass:"line-number"},[t._v("6")]),s("br"),s("span",{staticClass:"line-number"},[t._v("7")]),s("br"),s("span",{staticClass:"line-number"},[t._v("8")]),s("br"),s("span",{staticClass:"line-number"},[t._v("9")]),s("br"),s("span",{staticClass:"line-number"},[t._v("10")]),s("br"),s("span",{staticClass:"line-number"},[t._v("11")]),s("br"),s("span",{staticClass:"line-number"},[t._v("12")]),s("br"),s("span",{staticClass:"line-number"},[t._v("13")]),s("br"),s("span",{staticClass:"line-number"},[t._v("14")]),s("br"),s("span",{staticClass:"line-number"},[t._v("15")]),s("br"),s("span",{staticClass:"line-number"},[t._v("16")]),s("br"),s("span",{staticClass:"line-number"},[t._v("17")]),s("br"),s("span",{staticClass:"line-number"},[t._v("18")]),s("br"),s("span",{staticClass:"line-number"},[t._v("19")]),s("br"),s("span",{staticClass:"line-number"},[t._v("20")]),s("br")])]),s("p",[t._v("在上述示例中，我们首先使用 "),s("code",[t._v("store")]),t._v(" 操作将值存储为 42，然后使用 "),s("code",[t._v("load")]),t._v(" 操作加载该值并打印出来。接下来，我们使用 "),s("code",[t._v("compare_exchange_weak")]),t._v(" 尝试将值从 42 更改为 13，并根据返回值确定是否成功交换。")]),t._v(" "),s("h3",{attrs:{id:"bind函数"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#bind函数"}},[t._v("#")]),t._v(" bind函数")]),t._v(" "),s("p",[s("code",[t._v("std::bind")]),t._v("函数是C++11标准库中的一个函数模板，用于"),s("strong",[t._v("绑定参数到函数对象，并返回一个新的可调用对象")]),t._v("。它可以"),s("strong",[t._v("实现对函数的参数进行预先绑定、重排和占位，以实现更灵活的函数调用")]),t._v("。")]),t._v(" "),s("p",[s("code",[t._v("std::bind")]),t._v("函数的基本语法为：")]),t._v(" "),s("div",{staticClass:"language-cpp line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-cpp"}},[s("code",[t._v("std"),s("span",{pre:!0,attrs:{class:"token double-colon punctuation"}},[t._v("::")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("bind")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("Function"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" Arg1"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" Arg2"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br")])]),s("p",[s("strong",[t._v("其中，"),s("code",[t._v("Function")]),t._v("表示要绑定的函数或成员函数指针，"),s("code",[t._v("Arg1")]),t._v("、"),s("code",[t._v("Arg2")]),t._v("等表示要绑定到函数的参数")]),t._v("。")]),t._v(" "),s("p",[t._v("以下是"),s("code",[t._v("std::bind")]),t._v("函数的一些重要特性和使用方法：")]),t._v(" "),s("ol",[s("li",[t._v("参数绑定：可以"),s("strong",[t._v("通过"),s("code",[t._v("_1")]),t._v("、"),s("code",[t._v("_2")]),t._v("、"),s("code",[t._v("_3")]),t._v("等占位符来指定参数的位置")]),t._v("。当实际调用绑定函数时，这些占位符会被具体的参数值替换。")])]),t._v(" "),s("div",{staticClass:"language-cpp line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-cpp"}},[s("code",[t._v("std"),s("span",{pre:!0,attrs:{class:"token double-colon punctuation"}},[t._v("::")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("bind")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("Function"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" _1"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" value"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br")])]),s("ol",{attrs:{start:"2"}},[s("li",[s("strong",[t._v("成员函数绑定：可以将成员函数与对象进行绑定，使得在调用时自动传递对应的对象指针作为第一个参数")]),t._v("。")])]),t._v(" "),s("div",{staticClass:"language-cpp line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-cpp"}},[s("code",[t._v("std"),s("span",{pre:!0,attrs:{class:"token double-colon punctuation"}},[t._v("::")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("bind")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v("Class"),s("span",{pre:!0,attrs:{class:"token double-colon punctuation"}},[t._v("::")]),t._v("MemberFunction"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v("object"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" _1"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" _2"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br")])]),s("ol",{attrs:{start:"3"}},[s("li",[t._v("函数适配器：可以使用"),s("code",[t._v("std::bind")]),t._v("函数来创建函数适配器，改变函数的行为。比如创建一个只接受一个参数的函数对象。\n以下代码创建了一个新的函数对象，该对象只接受一个参数。这个函数对象"),s("strong",[t._v("将在调用时用绑定的值"),s("code",[t._v("value")]),t._v("替换掉原本的"),s("code",[t._v("Function")]),t._v("中的第一个参数，并将调用时传入的第一个参数替换占位符"),s("code",[t._v("_1")]),t._v("。")])])]),t._v(" "),s("div",{staticClass:"language-cpp line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-cpp"}},[s("code",[t._v("std"),s("span",{pre:!0,attrs:{class:"token double-colon punctuation"}},[t._v("::")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("bind")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("Function"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" value"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" _1"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br")])]),s("ol",{attrs:{start:"4"}},[s("li",[t._v("绑定到函数对象：可以将"),s("code",[t._v("bind")]),t._v("的结果绑定到另一个函数对象，从而实现更复杂的组合操作。")])]),t._v(" "),s("div",{staticClass:"language-cpp line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-cpp"}},[s("code",[t._v("std"),s("span",{pre:!0,attrs:{class:"token double-colon punctuation"}},[t._v("::")]),t._v("function"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" boundFunc "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" std"),s("span",{pre:!0,attrs:{class:"token double-colon punctuation"}},[t._v("::")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("bind")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("Function"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" _1"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" value"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br")])]),s("p",[t._v("总之，"),s("code",[t._v("std::bind")]),t._v("函数是C++11中引入的一个强大工具，可以在编程中实现更灵活的函数调用方式。它可以帮助简化代码，提高开发效率，并且与其他C++标准库中的函数对象（如"),s("code",[t._v("std::function")]),t._v("）结合使用，可以实现更加可复用和通用的代码。")]),t._v(" "),s("h4",{attrs:{id:"针对第2种情况"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#针对第2种情况"}},[t._v("#")]),t._v(" 针对第2种情况")]),t._v(" "),s("p",[t._v("当需要在函数适配器中传递"),s("code",[t._v("this")]),t._v("指针时，可以使用成员函数的绑定。通过将成员函数与对象的指针绑定，可以创建一个函数对象，该函数对象在调用时会自动传递正确的对象指针作为第一个参数。")]),t._v(" "),s("p",[t._v("以下是一个示例：")]),t._v(" "),s("div",{staticClass:"language-cpp line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-cpp"}},[s("code",[s("span",{pre:!0,attrs:{class:"token macro property"}},[s("span",{pre:!0,attrs:{class:"token directive-hash"}},[t._v("#")]),s("span",{pre:!0,attrs:{class:"token directive keyword"}},[t._v("include")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("<iostream>")])]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token macro property"}},[s("span",{pre:!0,attrs:{class:"token directive-hash"}},[t._v("#")]),s("span",{pre:!0,attrs:{class:"token directive keyword"}},[t._v("include")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("<functional>")])]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("MyClass")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("printMessage")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" std"),s("span",{pre:!0,attrs:{class:"token double-colon punctuation"}},[t._v("::")]),t._v("string"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v(" message"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        std"),s("span",{pre:!0,attrs:{class:"token double-colon punctuation"}},[t._v("::")]),t._v("cout "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<<")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Message: "')]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<<")]),t._v(" message "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<<")]),t._v(" std"),s("span",{pre:!0,attrs:{class:"token double-colon punctuation"}},[t._v("::")]),t._v("endl"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("main")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    MyClass obj"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("auto")]),t._v(" boundFunc "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" std"),s("span",{pre:!0,attrs:{class:"token double-colon punctuation"}},[t._v("::")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("bind")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v("MyClass"),s("span",{pre:!0,attrs:{class:"token double-colon punctuation"}},[t._v("::")]),t._v("printMessage"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v("obj"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" std"),s("span",{pre:!0,attrs:{class:"token double-colon punctuation"}},[t._v("::")]),t._v("placeholders"),s("span",{pre:!0,attrs:{class:"token double-colon punctuation"}},[t._v("::")]),t._v("_1"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("boundFunc")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Hello"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v('// 调用boundFunc("Hello")，相当于调用obj.printMessage("Hello")')]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 输出: Message: Hello")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br"),s("span",{staticClass:"line-number"},[t._v("5")]),s("br"),s("span",{staticClass:"line-number"},[t._v("6")]),s("br"),s("span",{staticClass:"line-number"},[t._v("7")]),s("br"),s("span",{staticClass:"line-number"},[t._v("8")]),s("br"),s("span",{staticClass:"line-number"},[t._v("9")]),s("br"),s("span",{staticClass:"line-number"},[t._v("10")]),s("br"),s("span",{staticClass:"line-number"},[t._v("11")]),s("br"),s("span",{staticClass:"line-number"},[t._v("12")]),s("br"),s("span",{staticClass:"line-number"},[t._v("13")]),s("br"),s("span",{staticClass:"line-number"},[t._v("14")]),s("br"),s("span",{staticClass:"line-number"},[t._v("15")]),s("br"),s("span",{staticClass:"line-number"},[t._v("16")]),s("br"),s("span",{staticClass:"line-number"},[t._v("17")]),s("br")])]),s("p",[t._v("在上面的示例中，我们定义了一个名为"),s("code",[t._v("MyClass")]),t._v("的类，并在其中定义了一个成员函数"),s("code",[t._v("printMessage")]),t._v("。然后，在"),s("code",[t._v("main")]),t._v("函数中创建了一个"),s("code",[t._v("MyClass")]),t._v("的对象"),s("code",[t._v("obj")]),t._v("。接下来，使用"),s("code",[t._v("std::bind")]),t._v("将"),s("code",[t._v("printMessage")]),t._v("函数与对象指针"),s("code",[t._v("&obj")]),t._v("进行绑定，并将占位符"),s("code",[t._v("std::placeholders::_1")]),t._v("用于表示将来调用时传入的参数。")]),t._v(" "),s("p",[t._v("通过这种绑定，我们创建了一个函数对象"),s("code",[t._v("boundFunc")]),t._v("，它在调用时会自动将正确的对象指针作为第一个参数，并传递给"),s("code",[t._v("printMessage")]),t._v("函数。最后，我们通过调用"),s("code",[t._v('boundFunc("Hello")')]),t._v("来间接调用了"),s("code",[t._v('obj.printMessage("Hello")')]),t._v('，输出了"Message: Hello"。')]),t._v(" "),s("p",[t._v("这样，我们就可以使用"),s("code",[t._v("std::bind")]),t._v("在函数适配器中传递"),s("code",[t._v("this")]),t._v("指针，实现对成员函数的适配，并调用正确的对象。")]),t._v(" "),s("h2",{attrs:{id:"_3、应用技术与主要工作"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_3、应用技术与主要工作"}},[t._v("#")]),t._v(" 3、应用技术与主要工作")]),t._v(" "),s("h3",{attrs:{id:"主要工作"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#主要工作"}},[t._v("#")]),t._v(" 主要工作")]),t._v(" "),s("ul",[s("li",[t._v("采用 "),s("strong",[t._v("multi-Reactors")]),t._v(" 和 "),s("strong",[t._v("one loop per thread + nonblocking IO")]),t._v("的网络模型实现IO处理和业务处理的分离；")]),t._v(" "),s("li",[t._v("对C++11线程类进行封装实现 "),s("strong",[t._v("one loop per thread")]),t._v("的一对一绑定关系；")]),t._v(" "),s("li",[t._v("使用C++11特性"),s("strong",[t._v("取代boost库在muduo中的使用，如shared_ptr、bind、atomic")]),t._v("等")]),t._v(" "),s("li",[s("strong",[t._v("使用"),s("code",[t._v("eventfd()")]),t._v("来实现 "),s("code",[t._v("mainLoop")]),t._v(" 对 "),s("code",[t._v("subLoop")]),t._v("的线程间通知操作，相比于使用任务队列需要加锁降低了开销")])])]),t._v(" "),s("h3",{attrs:{id:"遇到问题"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#遇到问题"}},[t._v("#")]),t._v(" 遇到问题")]),t._v(" "),s("h4",{attrs:{id:"原子变量未初始化"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#原子变量未初始化"}},[t._v("#")]),t._v(" 原子变量未初始化")]),t._v(" "),s("p",[t._v("服务器没有启动监听"),s("code",[t._v("Acceptor::listen")]),t._v("，排查后发现")]),t._v(" "),s("p",[s("code",[t._v("TcpServer::start()")]),t._v(" 中 执行该函数的判断变量没有初始化，导致判断条件不成立，无法执行"),s("code",[t._v("Acceptor::listen")])]),t._v(" "),s("p",[t._v("即控制TcpServer::start()只执行一次的原子变量"),s("strong",[t._v("started_")]),t._v(" 未初始化，数值为65538")]),t._v(" "),s("h4",{attrs:{id:"accept问题"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#accept问题"}},[t._v("#")]),t._v(" accept问题")]),t._v(" "),s("p",[t._v("调用"),s("code",[t._v("accept")]),t._v("处出错，错误码为 "),s("code",[t._v("errno = 22")])]),t._v(" "),s("p",[t._v("通过"),s("code",[t._v("perror")]),t._v("查询发现是"),s("code",[t._v("invalid argument")]),t._v(",查阅资料后发现具体是因为")]),t._v(" "),s("ol",[s("li",[t._v("accept函数参数不合法")]),t._v(" "),s("li",[t._v("对返回的"),s("code",[t._v("connfd")]),t._v("没设置非阻塞，因为本项目是Reactor模型 "),s("code",[t._v("one loop per thread")]),t._v(" + "),s("code",[t._v("non-blocking IO")])])]),t._v(" "),s("p",[t._v("为了方便起见，不想再多写fcntl，于是采用"),s("code",[t._v("accept4")]),t._v("替代 accept")]),t._v(" "),s("div",{staticClass:"language-cpp line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-cpp"}},[s("code",[t._v("sockaddr_in addr"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nsocklen_t len "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("sizeof")]),t._v(" addr"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("bzero")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v("addr"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("sizeof")]),t._v(" addr"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// sockfd是listen用")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" connfd "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token double-colon punctuation"}},[t._v("::")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("accept4")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("sockfd_"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("sockaddr"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v("addr"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v("len"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" SOCK_CLOEXEC "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v(" SOCK_NONBLOCK"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br"),s("span",{staticClass:"line-number"},[t._v("5")]),s("br")])]),s("h2",{attrs:{id:"_3、项目核心逻辑介绍"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_3、项目核心逻辑介绍"}},[t._v("#")]),t._v(" 3、项目核心逻辑介绍")]),t._v(" "),s("p",[t._v("我自己对Muduo库网络部分核心做了一个总结")]),t._v(" "),s("p",[t._v("Muduo库采用"),s("code",[t._v("one loop per thread")]),t._v(" + "),s("code",[t._v("nonblocking IO")]),t._v("网络模型，"),s("strong",[t._v("在mainLoop中 关注listenfd的读事件")]),t._v("，并且将该listenfd封装成一个特殊的 "),s("code",[t._v("TcpConnection")]),t._v(" 类即 "),s("code",[t._v("Acceptor")]),t._v(" ，因为其读事件的处理是调用 "),s("code",[t._v("accept")]),t._v(" 建立连接，并且将连接发送到一个subLoop上，选择subLoop的方法采用"),s("strong",[t._v("轮询")]),t._v("的方法。")]),t._v(" "),s("p",[s("strong",[t._v("EventLoop模块")])]),t._v(" "),s("p",[t._v("首先是最重要的"),s("code",[t._v("Reactor")]),t._v("模块，在Muduo库中也就是"),s("code",[t._v("EventLoop")]),t._v(" 类的，其中"),s("strong",[t._v("主要的功能负责调度和分发网络事件")]),t._v("即调用 "),s("code",[t._v("epoll_wait")]),t._v(" 监视fd感兴趣的事件，并执行对应的"),s("strong",[t._v("回调函数")]),t._v("。在Muduo中将这一个逻辑流程进行面向对象的拆解，将"),s("code",[t._v("epoll_wait")]),t._v(" 封装到 "),s("code",[t._v("EPollPoller")]),t._v("中，将fd以及其感兴趣的事件和对应回调封装到Channel中。"),s("strong",[t._v("EventLoop 负责 Channel 和 Poller的通信")]),t._v("，"),s("code",[t._v("EventLoop::loop()")]),t._v(" 调用 "),s("code",[t._v("Poller")]),t._v("进行检测事件，当有事件到来，再通过"),s("code",[t._v("EventLoop")]),t._v("调用 "),s("code",[t._v("Channel")]),t._v("中由"),s("code",[t._v("TcpConnection")]),t._v("和 用户设置的相应事件回调。")]),t._v(" "),s("p",[s("strong",[t._v("eventfd()")])]),t._v(" "),s("p",[t._v("注意到这里每一个Loop 与 其构造时的线程一一对应，在subLoop初始化时，会自动创建一个 "),s("code",[t._v("eventfd()")]),t._v("来供mainLoop唤醒它本身，这样就"),s("strong",[t._v("不需要使用生产者消费者队列来管理任务，从而避免subLoop争抢任务而要将队列加锁")]),t._v("带来的开销。")]),t._v(" "),s("p",[s("strong",[t._v("缓冲区Buffer")])]),t._v(" "),s("p",[s("strong",[t._v("非阻塞")]),t._v("网络编程中应用层"),s("code",[t._v("buffer")]),t._v("是必须的：非阻塞IO的核心思想是"),s("strong",[t._v("避免阻塞")]),t._v("在read()或write()或其他I/O系统调用上，这样可以最大限度复用thread-of-control，让一个线程能服务于多个socket连接。\nI/O线程只能阻塞在"),s("code",[t._v("IO-multiplexing")]),t._v("函数上，如"),s("code",[t._v("select()/poll()/epoll_wait()")]),t._v("。这样一来，应用层的缓冲是必须的，每个TCP socket都要有"),s("code",[t._v("inputBuffer")]),t._v("和"),s("code",[t._v("outputBuffer")]),t._v("。")]),t._v(" "),s("p",[s("code",[t._v("TcpConnection")]),t._v("必须有"),s("code",[t._v("output buffer")]),t._v("：使程序在"),s("code",[t._v("write()")]),t._v("操作上不会产生阻塞，当write()操作后，操作系统一次性没有发送完时，网络库把剩余数据则放入"),s("code",[t._v("outputBuffer")]),t._v("中，然后注册"),s("code",[t._v("POLLOUT")]),t._v("事件，一旦socket变得可写，则立刻调用write()进行写入数据。即将应用层buffer数据拷贝到操作系统buffer。")]),t._v(" "),s("p",[s("code",[t._v("TcpConnection")]),t._v("必须有"),s("code",[t._v("input buffer")]),t._v("：当发送方send数据后，接收方收到数据不一定是整个的数据，网络库在处理socket可读事件的时候，"),s("strong",[t._v("必须一次性把socket里的数据读完（加一个栈空间的数组用readv分散读），否则会反复触发POLLIN事件")]),t._v("，造成busy-loop。所以muduo库为了应对数据不完整的情况，收到的数据先放到inputBuffer里——操作系统buffer到应用层buffer。")]),t._v(" "),s("h2",{attrs:{id:"_4、muduo库-connfd-采用触发模式是lt-这样优点是"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_4、muduo库-connfd-采用触发模式是lt-这样优点是"}},[t._v("#")]),t._v(" 4、muduo库 connfd 采用"),s("strong",[t._v("触发模式是LT")]),t._v("，这样优点是")]),t._v(" "),s("ul",[s("li",[s("p",[s("strong",[t._v("不会丢失数据")]),t._v("或者消息"),s("br"),t._v("\n应用没有读取完数据，内核是会不断上报的")])]),t._v(" "),s("li",[s("p",[s("strong",[t._v("低延迟")]),t._v("处理"),s("br"),t._v("\n每次读数据只需要一次系统调用；照顾了多个连接的公平性，不会因为某个连接上的数据量过大而影响其他连接处理消息")])]),t._v(" "),s("li",[s("p",[s("strong",[t._v("跨平台")]),t._v("处理")]),t._v(" "),s("p",[t._v("像select一样可以跨平台使用")])])]),t._v(" "),s("p",[t._v("Muduo几大网络组件的抽象如下")]),t._v(" "),s("p",[s("img",{attrs:{src:"/assets/1693323274641.png",alt:"1693323274641"}})]),t._v(" "),s("p",[t._v("项目多处使用C++11特性如"),s("strong",[t._v("原子变量")]),t._v("实现"),s("strong",[t._v("无锁编程")]),t._v("，以及"),s("strong",[t._v("智能指针对资源进行安全管理")]),t._v("。")]),t._v(" "),s("h2",{attrs:{id:"_4、定时器是怎么实现的-还有什么实现方式"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_4、定时器是怎么实现的-还有什么实现方式"}},[t._v("#")]),t._v(" 4、定时器是怎么实现的？还有什么实现方式？")]),t._v(" "),s("blockquote",[s("blockquote",[s("p",[t._v("答：")]),t._v(" "),s("ul",[s("li",[t._v("理解定时器： 很多场景会使用到定时器，例如\n1.使用TCP长连接时，客户端需要定时向服务端发送心跳请求。\n2.财务系统每个月的月末定时生成对账单。\n3.双11的0点，定时开启秒杀开关。")]),t._v(" "),s("li",[t._v("一般定时任务的形式表现为：经过固定时间后触发、按固定频率周期性触发、在某个时刻触发。\n定时器可以理解为这样一个数据结构：存储一系列的任务集合，并且Deadline越接近的任务， 拥有越高的执行优先级，\n在用户视角支持以下几种操作：NewTask:将新任务加入任务集合， Cancel：取消某个任务，在任务调度视角还要支持：Run:"),s("strong",[t._v("执行一个到期的定时任务，判断一个 任务是否到期，基本会采用轮询的方式进行过，每隔一个时间片去检查最近的任务是否到期")]),t._v("，并且在 NewTask和Cancel的行为发生后，任务调度策略也会出现调整。")]),t._v(" "),s("li",[t._v("数据结构的选择包括：1. 双向有序链表，2. 堆， 3. 时间轮， 4.层级时间轮。")]),t._v(" "),s("li",[t._v("常见的实现")])]),t._v(" "),s("ol",[s("li",[t._v("TimerId非常简单，它被设计用来取消Timer的，它的结构很简单，只有一个Timer指针和其序列号。TimerQueue为其友元，可以操作其私有数据。")]),t._v(" "),s("li",[t._v("Timer封装了定时器的一些参数，例如超时回调函数、超时时间、定时器是否重复、重复间隔时间、定时器的序列号。其函数大都是设置这些参数，"),s("strong",[t._v("run()用来调用回调函数，restart()用来重启定时器")]),t._v("（如果设置为重复）。")]),t._v(" "),s("li",[t._v("TimerQueue其实现是基于Set的。TimerQueue的封装是为了让未到期的时间Timer有序的排列起来，这样，能够根据当前时间找到已经到期的Timer也能高效的添加和删除Timer。\n内部有channel，和timerfd关联。\n添加新的Timer后，"),s("strong",[t._v("在超时后，timerfd可读，会处理channel事件，之后调用Timer的回调函数")]),t._v("；在timerfd的事件处理后，还有检查一遍超时定时器，如果其属性为重复还有再次添加到定时器集合中。")])])])]),t._v(" "),s("h3",{attrs:{id:"muduo的定时器是如何设计的"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#muduo的定时器是如何设计的"}},[t._v("#")]),t._v(" "),s("a",{attrs:{href:"http://www.cppblog.com/Solstice/archive/2014/08/21/139769.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("muduo的定时器是如何设计的？"),s("OutboundLink")],1)]),t._v(" "),s("blockquote",[s("blockquote",[s("p",[t._v("答:")]),t._v(" "),s("ul",[s("li",[t._v("muduo的定时器功能由三个class实现，"),s("code",[t._v("TimerId")]),t._v("、"),s("code",[t._v("Timer")]),t._v("、"),s("code",[t._v("TimerQueue")]),t._v("，用户只能看到第一个class，另外两个都是内部实现细节。其中"),s("code",[t._v("TimerQueue")]),t._v("最重要的接口包括"),s("code",[t._v("addTimer()")]),t._v("添加定时任务和"),s("code",[t._v("cancel()")]),t._v("取消定时任务。")])])])]),t._v(" "),s("blockquote",[s("blockquote",[s("ul",[s("li",[t._v("muduo把定时器交给内核管理，利用linux内核提供的"),s("code",[t._v("timerfd_create")]),t._v("接口创建定时器。")])])])]),t._v(" "),s("blockquote",[s("blockquote",[s("ul",[s("li",[t._v("muduo中定义了"),s("code",[t._v("TimerQueue")]),t._v("类作为定时器的封装。初始化时候，通过linux的API创建"),s("code",[t._v("timerfd")]),t._v("。定义一个timers来存储timer,这个timers的存储结构是std::Set，元素是std::pair<Timerstamp, Timer*>，添加定时器则往timers添加，muduo使用的是set存储定时器，set是默认排序的，最早超时的会在最前面，即set.begin()为最早超时的定时器。")])])])]),t._v(" "),s("blockquote",[s("blockquote",[s("ul",[s("li",[t._v("获取超时任务是通过"),s("code",[t._v("getExpired()")]),t._v("函数实现的，其具体实现是根据传入的参数设置一个哨兵值，然后调用set::lower_bound()返回第一个未到期的Timer的迭代器， 之后在timers_中删除到期的任务，并返回到期的任务。muduo使用linux的API创建定时触发可读的timerfd_, "),s("strong",[t._v("fd触发时调用handleRead函数， 该函数调用getExpired获取超时定时器，并逐一执行")]),t._v("。")])])])]),t._v(" "),s("blockquote",[s("blockquote",[s("ul",[s("li",[t._v("cancel()通过（给每个Timer对象添加一个全局递增序列号，区分地址相同的先后两个Timer对象）。增加activeTimers_成员变量，保存的是目前有效的Timer指针，并满足"),s("code",[t._v("timers_.size() == activeTimers_.size()")]),t._v("，元素是pair<Timer*, int64_t>。并且利用"),s("code",[t._v("callingExpiredTimers_")]),t._v("和"),s("code",[t._v("cancelingTimers_")]),t._v("防止“自注销”现象，即定时器回调中注销当前定时器。")])])])]),t._v(" "),s("h2",{attrs:{id:"_7、网络库的io模型是怎么样的-为什么这个io模型是高性能的"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_7、网络库的io模型是怎么样的-为什么这个io模型是高性能的"}},[t._v("#")]),t._v(" 7、网络库的io模型是怎么样的，为什么这个io模型是高性能的？")]),t._v(" "),s("blockquote",[s("blockquote",[s("p",[t._v("UNP中总结的IO模型有5种之多："),s("code",[t._v("阻塞IO，非阻塞IO，IO复用，信号驱动IO，异步IO")]),t._v("。前四种都属于同步IO。阻塞IO不必说了。非阻塞IO ，IO请求时加上O_NONBLOCK一类的标志位，立刻返回，IO没有就绪会返回错误，需要请求进程主动轮询不断发IO请求直到返回正确。IO复用同非阻塞IO本质一样，不过利用了新的select系统调用，由"),s("strong",[t._v("内核来负责本来是请求进程该做的轮询操作")]),t._v("。看似比非阻塞IO还多了一个系统调用开销，不过"),s("strong",[t._v("因为可以支持多路IO，才算提高了效率")]),t._v("。信号驱动IO，"),s("strong",[t._v("调用sigaltion系统调用，当内核中IO数据就绪时以SIGIO信号通知请求进程，请求进程再把数据从内核读入到用户空间")]),t._v("，这一步是阻塞的。 异步IO，如定义所说，不会因为IO操作阻塞，IO操作全部完成才通知请求进程。")])])]),t._v(" "),s("blockquote",[s("blockquote",[s("p",[s("code",[t._v("Reactor[one loop per thread: non-blocking + IO multiplexing]")]),t._v("模型。muduo采用的是Reactors in thread有一个main Reactor负责accept(2)连接，然后把连接挂在某个sub Reactor中(muduo中采用的是round-robin的方式来选择sub Reactor)，这样该连接的所有操作都在那个sub Reactor所处的线程中完成。多个连接可能被分到多个线程中，以充分利用CPU。")])])]),t._v(" "),s("blockquote",[s("blockquote",[s("p",[t._v("muduo采用的是固定大小的Reactor pool，池子的大小通常根据CPU数目确定。也就是说线程数固定，这样程序的总体处理能力不会随连接数增加而下降。另外一个连接完全由一个线程管理，那么请求的顺序性有保证，突发请求也不会占满8个核(如果需要优化突发请求，可以考虑Reactors + thread pool)。这种方案把IO分派给多个线程，防止出现一个Reactor的处理能力饱和。")])])]),t._v(" "),s("p",[s("img",{attrs:{src:"/assets/0_1280551552NVgW.jpg",alt:"各种IO模型的比较"}})]),t._v(" "),s("blockquote",[s("blockquote",[s("p",[s("a",{attrs:{href:"https://www.cnblogs.com/findumars/p/6361627.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("5种网络IO模型（有图，很清楚）"),s("OutboundLink")],1),t._v(" "),s("a",{attrs:{href:"https://blog.csdn.net/WuLex/article/details/80615699",target:"_blank",rel:"noopener noreferrer"}},[t._v("五种网络io模型"),s("OutboundLink")],1),t._v(" "),s("a",{attrs:{href:"https://blog.csdn.net/weixin_43819197/article/details/92828590",target:"_blank",rel:"noopener noreferrer"}},[t._v("muduo网络库：Reactor模型的介绍"),s("OutboundLink")],1)])])]),t._v(" "),s("h2",{attrs:{id:"_10、muduo的主线程accept的fd如何分发给其他线程"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_10、muduo的主线程accept的fd如何分发给其他线程"}},[t._v("#")]),t._v(" 10、muduo的主线程accept的fd如何分发给其他线程？")]),t._v(" "),s("p",[t._v("TcpServer"),s("strong",[t._v("每次新建一个TcpConnection就会调用getNextLoop()来取得EventLoop")]),t._v("，采用round-robin算法来选取pool中的EventLoop,"),s("strong",[t._v("不允许TcpConnection在运行中更换EventLoop")]),t._v("。")]),t._v(" "),s("h2",{attrs:{id:"_13、muduo如何限制连接的数量"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_13、muduo如何限制连接的数量"}},[t._v("#")]),t._v(" "),s("a",{attrs:{href:"http://www.cppblog.com/Solstice/archive/2011/04/27/145102.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("13、muduo如何限制连接的数量？"),s("OutboundLink")],1)]),t._v(" "),s("ul",[s("li",[s("p",[t._v("解决文件描述符达到上限")]),t._v(" "),s("p",[t._v("准备一个空闲文件描述符。遇到这种情况，先关闭空闲文件，获得一个文件描述符的名额，再accept拿到新的socket连接的描述符，随后立刻close它，这样就优雅的断开了客户端连接，最后重新打开一个空闲文件。")])]),t._v(" "),s("li",[s("p",[t._v("增加一个 int 成员，表示当前的活动连接数。然后，在 EchoServer::onConnection() 中判断当前活动连接数，如果超过最大允许数，则踢掉连接。")])])]),t._v(" "),s("h2",{attrs:{id:"_16、muduo如何设计buffer"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_16、muduo如何设计buffer"}},[t._v("#")]),t._v(" 16、"),s("a",{attrs:{href:"https://www.cnblogs.com/solstice/archive/2011/04/17/2018801.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("muduo如何设计buffer？"),s("OutboundLink")],1)]),t._v(" "),s("p",[t._v("Muduo Buffer 的设计要点：")]),t._v(" "),s("ul",[s("li",[s("em",[s("em",[t._v("对外表现为一块连续的内存(char")]),t._v(", len)")]),t._v("* ，以方便客户代码的编写。")]),t._v(" "),s("li",[s("strong",[t._v("其 size() 可以自动增长")]),t._v("，以适应不同大小的消息。它不是一个 fixed size array (即 char buf[8192])。")]),t._v(" "),s("li",[s("strong",[t._v("内部以 vector of char 来保存数据，并提供相应的访问函数")]),t._v("。")])]),t._v(" "),s("p",[t._v("Buffer 其实像是一个 queue，从末尾写入数据，从头部读出数据。")]),t._v(" "),s("p",[t._v("TcpConnection 会有两个 Buffer 成员，input buffer 与 output buffer。")]),t._v(" "),s("ul",[s("li",[t._v("input buffer，TcpConnection 会从 socket 读取数据，然后写入 input buffer（其实这一步是用 Buffer::readFd() 完成的）；客户代码从 input buffer 读取数据。")]),t._v(" "),s("li",[t._v("output buffer，客户代码会把数据写入 output buffer（其实这一步是用 TcpConnection::send() 完成的）；TcpConnection 从 output buffer 读取数据并写入 socket。")])]),t._v(" "),s("p",[t._v("其实，input 和 output 是针对客户代码而言，客户代码从 input 读，往 output 写。TcpConnection 的读写正好相反。")]),t._v(" "),s("p",[t._v("具体做法是，在栈上准备一个 65536 字节的 stackbuf，然后利用 readv() 来读取数据，iovec 有两块，第一块指向 muduo Buffer 中的 writable 字节，另一块指向栈上的 stackbuf。这样如果读入的数据不多，那么全部都读到 Buffer 中去了；如果长度超过 Buffer 的 writable 字节数，就会读到栈上的 stackbuf 里，然后程序再把 stackbuf 里的数据 append 到 Buffer 中。")]),t._v(" "),s("p",[s("img",{attrs:{src:"/assets/68747470733a2f2f696d616765732e636e626c6f67732e636f6d2f7.png",alt:"buffer0"}})]),t._v(" "),s("p",[t._v("两个 indices 把 vector 的内容分为三块：prependable、readable、writable，各块的大小是（"),s("strong",[t._v("公式一")]),t._v("）：")]),t._v(" "),s("ul",[s("li",[t._v("prependable = readIndex")]),t._v(" "),s("li",[t._v("readable = writeIndex - readIndex")]),t._v(" "),s("li",[t._v("writable = size() - writeIndex（prependable 的作用留到后面讨论。）")])]),t._v(" "),s("p",[t._v("readIndex 和 writeIndex 满足以下不变式(invariant):")]),t._v(" "),s("ul",[s("li",[t._v("0 ≤ readIndex ≤ writeIndex ≤ data.size()")])]),t._v(" "),s("h2",{attrs:{id:"_21、如何安全的关闭tcp连接-能不能直接close-如何直接close会发生什么"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_21、如何安全的关闭tcp连接-能不能直接close-如何直接close会发生什么"}},[t._v("#")]),t._v(" 21、"),s("a",{attrs:{href:"https://blog.csdn.net/Solstice/article/details/6208634",target:"_blank",rel:"noopener noreferrer"}},[t._v("如何安全的关闭tcp连接，能不能直接close，如何直接close会发生什么？"),s("OutboundLink")],1)]),t._v(" "),s("p",[t._v("调用TcpConnection::shutdown主动关闭时，muduo 把“主动关闭连接”这件事情分成两步来做，如果要主动关闭连接，它会先关本地“写”端，等对方关闭之后，再关本地“读”端。")]),t._v(" "),s("p",[t._v("“如果被动关闭连接，muduo 的行为如何？” 提示：muduo 在 read() 返回 0 的时候会回调 connection callback，这样客户代码就知道对方断开连接了。")]),t._v(" "),s("p",[t._v("直接关闭会影响收发数据的完整性")]),t._v(" "),s("h3",{attrs:{id:"什么是优雅关闭连接-就是read-到0-要透明的传递这个行为而不是直接暴力close"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#什么是优雅关闭连接-就是read-到0-要透明的传递这个行为而不是直接暴力close"}},[t._v("#")]),t._v(" 什么是优雅关闭连接？(就是read()到0，要透明的传递这个行为而不是直接暴力close())")]),t._v(" "),s("p",[t._v("先在TcpServer中移除当前连接，然后在TcpConnection::connectionDestroyed()中调用connectionCallback_通知关闭，最后在loop_中移除当前channel_。")]),t._v(" "),s("h2",{attrs:{id:"_22、muduo是如何-线程安全的对-对象的生命周期进行管理"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_22、muduo是如何-线程安全的对-对象的生命周期进行管理"}},[t._v("#")]),t._v(" 22、muduo是如何 线程安全的对 对象的生命周期进行管理？")]),t._v(" "),s("h3",{attrs:{id:"chatgpt"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#chatgpt"}},[t._v("#")]),t._v(" chatgpt")]),t._v(" "),s("p",[t._v("muduo 是一个基于 C++ 的网络库，设计用来构建高性能的多线程服务器应用程序。在 muduo 中，对象的生命周期管理主要通过"),s("strong",[t._v("智能指针和对象的创建与销毁策略来实现线程安全")]),t._v("。")]),t._v(" "),s("p",[t._v("以下是 muduo 如何线程安全地对对象的生命周期进行管理的一些关键点：")]),t._v(" "),s("ol",[s("li",[s("p",[t._v("智能指针：muduo 使用了 "),s("code",[t._v("shared_ptr")]),t._v(" 和 "),s("code",[t._v("weak_ptr")]),t._v(" 来管理对象的生命周期。"),s("code",[t._v("shared_ptr")]),t._v(" 允许多个线程共享同一个对象，并在最后一个引用被销毁时自动释放对象资源。"),s("code",[t._v("weak_ptr")]),t._v(" 则提供了一种非拥有（弱）引用的方式，可以检查对象是否已经被销毁。")])]),t._v(" "),s("li",[s("p",[t._v("对象的创建与销毁策略：muduo 采用了对象池技术来管理对象的创建与销毁。对象池在初始化时会"),s("strong",[t._v("预先创建一定数量的对象，并将其保存在一个对象集合中")]),t._v("。当需要对象时，可以"),s("strong",[t._v("从对象池中获取一个空闲对象")]),t._v("，"),s("strong",[t._v("而不是每次都创建新的对象")]),t._v("。当对象不再使用时，可以将其"),s("strong",[t._v("返回到对象池中以便重复利用")]),t._v("，而不是立即销毁对象。这种方式减少了频繁的对象创建与销毁操作，提高了性能和效率。")])]),t._v(" "),s("li",[s("p",[t._v("线程安全的访问控制：muduo 通过使用互斥锁（mutex）和条件变量（condition variable）等同步机制来保护对象的访问，"),s("strong",[t._v("确保多个线程之间对同一个对象的访问是安全的")]),t._v("。通过"),s("strong",[t._v("加锁和解锁操作，控制了对共享对象的并发访问")]),t._v("。")])])]),t._v(" "),s("p",[t._v("总体上说，muduo 通过智能指针、对象池和线程安全的访问控制等方法，实现了对对象生命周期的线程安全管理。这些机制确保了多线程环境下对象的正确创建、使用和销毁，并提高了性能和效率。")]),t._v(" "),s("h2",{attrs:{id:"_23、eventfd是什么-有什么好处"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_23、eventfd是什么-有什么好处"}},[t._v("#")]),t._v(" 23、eventfd是什么？有什么好处？")]),t._v(" "),s("ul",[s("li",[t._v("eventfd是linux的一个系统调用，"),s("strong",[t._v("为事件通知创建文件描述符")]),t._v("，"),s("strong",[t._v("eventfd()创建一个“eventfd对象”")]),t._v(" ，这个对象能被"),s("strong",[t._v("用户空间应用用作一个事件等待/响应机制，靠内核去响应用户空间应用事件")]),t._v("。")]),t._v(" "),s("li",[s("strong",[t._v("实现唤醒，让IO线程从IO multiplexing阻塞调用中返回，更高效地唤醒")]),t._v("。")])]),t._v(" "),s("p",[s("code",[t._v("eventfd")]),t._v(" 是 "),s("strong",[t._v("Linux 提供的一种事件文件描述符，用于在用户空间和内核之间进行事件通知")]),t._v("。以下是对 "),s("code",[t._v("eventfd")]),t._v(" 的详细解释：")]),t._v(" "),s("ol",[s("li",[s("p",[t._v("创建 "),s("code",[t._v("eventfd")]),t._v("：使用 "),s("code",[t._v("eventfd")]),t._v(" 系统调用可以创建一个新的 "),s("code",[t._v("eventfd")]),t._v(" 文件描述符。")]),t._v(" "),s("div",{staticClass:"language-c line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-c"}},[s("code",[s("span",{pre:!0,attrs:{class:"token macro property"}},[s("span",{pre:!0,attrs:{class:"token directive-hash"}},[t._v("#")]),s("span",{pre:!0,attrs:{class:"token directive keyword"}},[t._v("include")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("<sys/eventfd.h>")])]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("eventfd")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("unsigned")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" initval"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" flags"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br")])]),s("ul",[s("li",[s("code",[t._v("initval")]),t._v(" 是初始计数器值，指定了 "),s("code",[t._v("eventfd")]),t._v(" 的初始状态。")]),t._v(" "),s("li",[s("code",[t._v("flags")]),t._v(" 可以设置一些选项，常用的选项有 "),s("code",[t._v("EFD_NONBLOCK")]),t._v("（非阻塞模式）和 "),s("code",[t._v("EFD_SEMAPHORE")]),t._v("（信号量模式）。")])])])]),t._v(" "),s("h3",{attrs:{id:"_24、双缓冲区异步日志是什么-为什么要这样做-对这个日志系统有没有进行压力测试"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_24、双缓冲区异步日志是什么-为什么要这样做-对这个日志系统有没有进行压力测试"}},[t._v("#")]),t._v(" 24、"),s("a",{attrs:{href:"https://blog.csdn.net/daaikuaichuan/article/details/86500108",target:"_blank",rel:"noopener noreferrer"}},[t._v("双缓冲区异步日志是什么？为什么要这样做？对这个日志系统有没有进行压力测试？"),s("OutboundLink")],1)]),t._v(" "),s("ul",[s("li",[t._v("日志库采用的是双缓冲技术，基本思路是准备两块缓冲：A与B，"),s("strong",[t._v("前端负责往buffer A中填数据（日志消息），后端负责将buffer B中的数据写入文件")]),t._v("。当"),s("strong",[t._v("buffer A写满之后，交换A与B")]),t._v("，"),s("strong",[t._v("让后端将buffer A中的数据写入文件，而前端负责往buffer B中填入新的日志文件")]),t._v("。如此往复。用两个buffer的好处是"),s("strong",[t._v("在新建日志消息的时候不必等待磁盘文件操作，也避免每条消息都触发（唤醒）了后端日志线程")]),t._v("。换言之，前端不是将一条条消息分别传送给后端，而是将多个日志消息拼成一个大的buffer传送给后端，相当于批处理，"),s("strong",[t._v("减少了线程唤醒的频率，降低了开销")]),t._v("。另外，为了及时将消息写入文件，即使前端的buffer A未写满，"),s("strong",[t._v("日志库也会每三秒执行一次上述交换写入操作")]),t._v("。\n"),s("img",{attrs:{src:"/assets/1692081412250.png",alt:"1692081412250"}})]),t._v(" "),s("li",[s("strong",[t._v("多个线程可以并发写日志，两个线程日志消息不会出现交织，并且满足高性能，不存在抢锁的现象。网络IO线程或业务线程中直接往磁盘写数据的话，写操作偶尔可能会阻塞长达数秒。导致请求超时或者耽误发送心跳消息，引起误报死锁，或者引发自动faileover等")]),t._v("。")]),t._v(" "),s("li",[s("strong",[t._v("什么时候切换写到另一个日志文件")]),t._v("？前一个buffer已经写满了，则交换两个buffer（写满的buffer置空）。")]),t._v(" "),s("li",[s("strong",[t._v("日志串写入过多，日志线程来不及消费，怎么办")]),t._v("？直接丢掉多余的日志buffer，腾出内存，防止引起程序故障。")]),t._v(" "),s("li",[s("strong",[t._v("什么时候唤醒日志线程从Buffer中取数据")]),t._v("？其一是超时，其二是前端写满了一个或者多个buffer。")])]),t._v(" "),s("p",[t._v("参考: "),s("a",{attrs:{href:"https://www.twblogs.net/a/5b8dcefa2b7177188340bbb4/zh-cn",target:"_blank",rel:"noopener noreferrer"}},[t._v("muduo的日志库分析四之AsyncLogging类"),s("OutboundLink")],1)]),t._v(" "),s("h2",{attrs:{id:"_25、epoll的边沿触发和水平触发有什么区别-epoll的源码并不长-从源码的角度回答比较好"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_25、epoll的边沿触发和水平触发有什么区别-epoll的源码并不长-从源码的角度回答比较好"}},[t._v("#")]),t._v(" 25、"),s("a",{attrs:{href:"https://www.cnblogs.com/charlesblc/p/6242479.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("epoll的边沿触发和水平触发有什么区别？(epoll的源码并不长，从源码的角度回答比较好)"),s("OutboundLink")],1)]),t._v(" "),s("p",[s("strong",[t._v("水平触发(level-trggered)")])]),t._v(" "),s("ul",[s("li",[t._v("只要"),s("strong",[t._v("文件描述符关联的读内核缓冲区非空，有数据可以读取，就一直发出可读信号进行通知")]),t._v("，")]),t._v(" "),s("li",[t._v("当文件描述符关联的内核写缓冲区不满，有空间可以写入，就一直发出可写信号进行通知")])]),t._v(" "),s("p",[s("strong",[t._v("LT模式支持阻塞和非阻塞两种方式。epoll默认的模式是LT。")])]),t._v(" "),s("p",[s("strong",[t._v("边缘触发(edge-triggered)")])]),t._v(" "),s("ul",[s("li",[t._v("当"),s("strong",[t._v("文件描述符关联的读内核缓冲区由空转化为非空的时候，则发出可读信号进行通知")]),t._v("，")]),t._v(" "),s("li",[t._v("当文件描述符关联的内核写缓冲区由满转化为不满的时候，则发出可写信号进行通知")]),t._v(" "),s("li",[t._v("两者的区别在哪里呢？水平触发是只要读缓冲区有数据，就会一直触发可读信号，而边缘触发仅仅在空变为非空的时候通知一次。")]),t._v(" "),s("li",[t._v("执行epoll_create时，创建了"),s("strong",[t._v("红黑树和就绪链表")]),t._v("，执行epoll_ctl时，如果增加socket句柄，则检查在红黑树中是否存在，存在立即返回，不存在则添加到树干上，然后"),s("strong",[t._v("向内核注册回调函数")]),t._v("，用于当中断事件来临时向准备就绪链表中插入数据。执行epoll_wait时立刻返回准备就绪链表里的数据即可。")])]),t._v(" "),s("h2",{attrs:{id:"_26、epoll为什么高效-相比select和poll"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_26、epoll为什么高效-相比select和poll"}},[t._v("#")]),t._v(" 26、"),s("a",{attrs:{href:"https://www.cnblogs.com/charlesblc/p/6242479.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("epoll为什么高效，相比select和poll"),s("OutboundLink")],1)]),t._v(" "),s("ul",[s("li",[t._v("这是由于我们在调用epoll_create时，内核除了帮我们"),s("strong",[t._v("在epoll文件系统里建了个file结点")]),t._v("，"),s("strong",[t._v("在内核cache里建了个红黑树用于存储以后epoll_ctl传来的socket")]),t._v("外，还会"),s("strong",[t._v("再建立一个list链表，用于存储准备就绪的事件，当epoll_wait调用时，仅仅观察这个list链表里有没有数据即可")]),t._v("。有数据就返回，没有数据就sleep，等到timeout时间到后即使链表没数据也返回。所以，epoll_wait非常高效。")])]),t._v(" "),s("h2",{attrs:{id:"_27、假如服务器要升级-又不想让用户感觉到服务器升级了-该怎么做-其实就是不间断的提供服务-参考nginx的平滑升级"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_27、假如服务器要升级-又不想让用户感觉到服务器升级了-该怎么做-其实就是不间断的提供服务-参考nginx的平滑升级"}},[t._v("#")]),t._v(" 27、假如服务器要升级，又不想让用户感觉到服务器升级了，该怎么做？(其实就是不间断的提供服务，参考nginx的平滑升级)")]),t._v(" "),s("p",[s("strong",[t._v("平滑升级的本质就是 listener fd 的迁移")])]),t._v(" "),s("p",[s("strong",[t._v("Nginx 的平滑升级是通过 "),s("code",[t._v("fork")]),t._v(" + "),s("code",[t._v("execve")]),t._v(" 这种经典的处理方式来实现的。")]),t._v(" 准备升级时，Old Master 进程收到信号"),s("strong",[t._v("然后 "),s("code",[t._v("fork")]),t._v(" 出一个子进程，注意此时这个子进程运行的依然是老的镜像文件。紧接着这个子进程会通过 "),s("code",[t._v("execve")]),t._v(" 调用执行新的二进制文件来替换掉自己，成为 New Master")]),t._v("。")]),t._v(" "),s("p",[t._v("Nginx 在 "),s("code",[t._v("execve")]),t._v(" 的时候压根就没有重新 "),s("code",[t._v("bind")]),t._v(" + "),s("code",[t._v("listen")]),t._v("，而是"),s("strong",[t._v("直接把 listener fd 添加到 "),s("code",[t._v("epoll")]),t._v(" 的事件表")]),t._v("。因为这个 New Master 本来就是从 Old Master 继承而来，自然就继承了 Old Master 的 listener fd。")]),t._v(" "),s("p",[s("strong",[t._v("环境变量")]),t._v("。"),s("code",[t._v("execve")]),t._v(" 在执行的时候可以传入环境变量。实际上 Old Master 在 "),s("code",[t._v("fork")]),t._v(" 之前会将所有 listener fd 添加到 "),s("code",[t._v("NGINX")]),t._v(" 环境变量：")]),t._v(" "),s("p",[t._v("Nginx 在启动的时候，会解析 "),s("code",[t._v("NGINX")]),t._v(" 环境变量，一旦检测到是继承而来的 socket，那就说明已经打开了，不会再继续 "),s("code",[t._v("bind")]),t._v(" + "),s("code",[t._v("listen")]),t._v(" 了：")]),t._v(" "),s("p",[t._v("参考"),s("a",{attrs:{href:"https://www.slideshare.net/joshzhu/nginx-internals",target:"_blank",rel:"noopener noreferrer"}},[t._v("Nginx Internals"),s("OutboundLink")],1)]),t._v(" "),s("h2",{attrs:{id:"_32、怎么检查内存泄漏的"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_32、怎么检查内存泄漏的"}},[t._v("#")]),t._v(" 32、"),s("a",{attrs:{href:"https://www.cnblogs.com/skynet/archive/2011/02/20/1959162.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("怎么检查内存泄漏的？"),s("OutboundLink")],1)]),t._v(" "),s("p",[s("strong",[t._v("定义")]),t._v("：内存泄漏简单的说就是申请了⼀块内存空间，使⽤完毕后没有释放掉。 它的⼀般表现⽅式是程序运⾏时间越⻓，占⽤内存越多，最终⽤尽全部内存，整个系统崩溃。由程序申请的⼀块内存，且没有任何⼀个指针指向它，那么这块内存就泄漏了。 "),s("strong",[t._v("内存泄漏并⾮指内存在物理上消失，⽽是应⽤程序分配某段内存后，由于设计错误，失去了对该段内存的控制")])]),t._v(" "),s("p",[s("strong",[t._v("如何检测内存泄漏")])]),t._v(" "),s("ul",[s("li",[t._v("⾸先可以通过观察猜测是否可能发⽣内存泄漏，Linux 中使⽤ swap 命令观察还有多少可⽤的交换空间，在⼀\n两分钟内键⼊该命令三到四次，看看可⽤的交换区是否在减少。")]),t._v(" "),s("li",[t._v("还可以使⽤ 其他⼀些 /usr/bin/stat ⼯具如 netstat、vmstat 等。如发现波段有内存被分配且从不释放，⼀个\n可能的解释就是有个进程出现了内存泄漏。")]),t._v(" "),s("li",[t._v("当然也有⽤于内存调试，内存泄漏检测以及性能分析的软件开发⼯具 valgrind 这样的⼯具来进⾏内存泄漏的\n检测。")]),t._v(" "),s("li",[t._v("检查⽅法：在main函数最后⾯⼀⾏，加上⼀句_CrtDumpMemoryLeaks()。调试程序，⾃然关闭程序让其退出，查看输出：\n输出这样的格式{453}normal block at 0x02432CA8,868 bytes long\n被{}包围的453就是我们需要的内存泄漏定位值，868 bytes long就是说这个地⽅有868⽐特内存没有释放。\n定位代码位置\n在main函数第⼀⾏加上_CrtSetBreakAlloc(453);意思就是在申请453这块内存的位置中断。然后调试程序，程序中断了，查看调⽤堆栈。加上头⽂件"),s("code",[t._v("#include <crtdbg.h>")])])]),t._v(" "),s("p",[s("strong",[t._v("避免")])]),t._v(" "),s("ul",[s("li",[t._v("动态内存的分配与释放必须配对")]),t._v(" "),s("li",[t._v("智能指针")])]),t._v(" "),s("h3",{attrs:{id:"_34、用到了哪些智能指针和raii机制-几种锁的区别是什么"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_34、用到了哪些智能指针和raii机制-几种锁的区别是什么"}},[t._v("#")]),t._v(" 34、用到了哪些智能指针和"),s("a",{attrs:{href:"https://www.jianshu.com/p/b7ffe79498be",target:"_blank",rel:"noopener noreferrer"}},[t._v("RAII机制"),s("OutboundLink")],1),t._v("，几种锁的区别是什么")]),t._v(" "),s("ul",[s("li",[s("p",[t._v("shared_ptr、unique_ptr、scope_ptr、weak_ptr")]),t._v(" "),s("ul",[s("li",[s("p",[t._v("shared_ptr: TcpClient::Connector")])]),t._v(" "),s("li",[s("p",[t._v("unique_ptr: AsyncLogging::BufferVector")])]),t._v(" "),s("li",[s("p",[t._v("scope_ptr: EventLoop::poller TcpConnection::socket_, channel_")]),t._v(" "),s("ul",[s("li",[s("p",[t._v("scope_ptr是一个很类似auto_ptr的智能指针，它包装了new操作符在堆上分配的动态对象，能够保证动态创建的对象在任何时候都可以被正确地删除。")]),t._v(" "),s("p",[t._v("但scope_ptr的所有权更加严格，不能转让，一旦scope_ptr获得了对象的管理权，你就无法再从它那里取回来.")])])])]),t._v(" "),s("li",[s("p",[t._v("weak_ptr")])])])])]),t._v(" "),s("h2",{attrs:{id:"_27-任务队列是怎么实现的-除了加锁还有什么方式"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_27-任务队列是怎么实现的-除了加锁还有什么方式"}},[t._v("#")]),t._v(" 27.任务队列是怎么实现的，除了加锁还有什么方式？")]),t._v(" "),s("h3",{attrs:{id:"eventloop重要成员变量"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#eventloop重要成员变量"}},[t._v("#")]),t._v(" EventLoop重要成员变量")]),t._v(" "),s("p",[s("code",[t._v("pendingFunctors_")]),t._v("：如果涉及跨线程调用函数时，会将函数储存到"),s("code",[t._v("pendingFunctors_")]),t._v("这个任务队列中。")]),t._v(" "),s("div",{staticClass:"language-cpp line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-cpp"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 在I/O线程中调用某个函数，该函数可以跨线程调用")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("EventLoop")]),s("span",{pre:!0,attrs:{class:"token double-colon punctuation"}},[t._v("::")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("runInLoop")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("Functor cb"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("isInLoopThread")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 如果是在当前I/O线程中调用，就同步调用cb回调函数")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("cb")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("else")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 否则在其他线程中调用，就异步将cb添加到任务队列当中，")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 以便让EventLoop真实对应的I/O线程执行这个回调函数")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("queueInLoop")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("std"),s("span",{pre:!0,attrs:{class:"token double-colon punctuation"}},[t._v("::")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("move")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("cb"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br"),s("span",{staticClass:"line-number"},[t._v("5")]),s("br"),s("span",{staticClass:"line-number"},[t._v("6")]),s("br"),s("span",{staticClass:"line-number"},[t._v("7")]),s("br"),s("span",{staticClass:"line-number"},[t._v("8")]),s("br"),s("span",{staticClass:"line-number"},[t._v("9")]),s("br"),s("span",{staticClass:"line-number"},[t._v("10")]),s("br"),s("span",{staticClass:"line-number"},[t._v("11")]),s("br"),s("span",{staticClass:"line-number"},[t._v("12")]),s("br"),s("span",{staticClass:"line-number"},[t._v("13")]),s("br"),s("span",{staticClass:"line-number"},[t._v("14")]),s("br"),s("span",{staticClass:"line-number"},[t._v("15")]),s("br")])]),s("h3",{attrs:{id:"eventloop-是如何保证线程安全的"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#eventloop-是如何保证线程安全的"}},[t._v("#")]),t._v(" EventLoop 是如何保证线程安全的")]),t._v(" "),s("p",[t._v("还以上述的那个例子：")]),t._v(" "),s("div",{staticClass:"language-cpp line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-cpp"}},[s("code",[t._v("EventLoop"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" ioLoop "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" threadPool_"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("getNextLoop")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nioLoop"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("runInLoop")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("std"),s("span",{pre:!0,attrs:{class:"token double-colon punctuation"}},[t._v("::")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("bind")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v("TcpConnection"),s("span",{pre:!0,attrs:{class:"token double-colon punctuation"}},[t._v("::")]),t._v("connectEstablished"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" conn"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br")])]),s("p",[t._v("这里获取的 ioLoop 是从线程池中某个线程创建而来的，那么可以知道创建 ioLoop 的线程和目前运行的线程不是同一个线程，那么这个操作是线程不安全的。")]),t._v(" "),s("p",[t._v("一般为了保证线程安全，我们可能会使用互斥锁之类的手段来保证线程同步。但是，互斥锁的粗粒度难以把握，如果锁的范围很大，各个线程频繁争抢锁执行任务会大大拖慢网络效率。")]),t._v(" "),s("p",[t._v("而 muduo 的处理方法是，保证各个任务在其原有得线程中执行。如果跨线程执行，则将此任务加入到任务队列中，并唤醒应当执行此任务得线程。而原线程唤醒其他线程之后，就可以继续执行别的操作了。可以看到，这是一个异步得操作。 接下来继续探索"),s("code",[t._v("queueInLoop")]),t._v("的实现：")]),t._v(" "),s("div",{staticClass:"language-cpp line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-cpp"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 将任务添加到队列当中，队就是成员pendingFunctors_数组容器")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("EventLoop")]),s("span",{pre:!0,attrs:{class:"token double-colon punctuation"}},[t._v("::")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("queueInLoop")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("Functor cb"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 操作任务队列需要保证互斥")]),t._v("\n        MutexLockGuard "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("lock")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("mutex_"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        pendingFunctors_"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("push_back")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("std"),s("span",{pre:!0,attrs:{class:"token double-colon punctuation"}},[t._v("::")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("move")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("cb"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/**\n     * 调用此函数的线程不是这个EventLoop的创建线程\n     * 或者正在处理PendingFunctors的情况则唤醒IO线程\n     * \n     * 如果是当前的IO线程调用且并没有正处理PendgingFunctors\n     * 则不必唤醒\n     */")]),t._v("   \n    \n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 唤醒相应的线程，需要执行上面回调操作的loop的线程了")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// ||callingPendingFunctors_的意思是：当前loop正在执行回调，但是loop又有了新的回调，继续唤醒执行新的回调")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("isInLoopThread")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("||")]),t._v(" callingPendingFunctors_"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("wakeup")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    \n    \n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br"),s("span",{staticClass:"line-number"},[t._v("5")]),s("br"),s("span",{staticClass:"line-number"},[t._v("6")]),s("br"),s("span",{staticClass:"line-number"},[t._v("7")]),s("br"),s("span",{staticClass:"line-number"},[t._v("8")]),s("br"),s("span",{staticClass:"line-number"},[t._v("9")]),s("br"),s("span",{staticClass:"line-number"},[t._v("10")]),s("br"),s("span",{staticClass:"line-number"},[t._v("11")]),s("br"),s("span",{staticClass:"line-number"},[t._v("12")]),s("br"),s("span",{staticClass:"line-number"},[t._v("13")]),s("br"),s("span",{staticClass:"line-number"},[t._v("14")]),s("br"),s("span",{staticClass:"line-number"},[t._v("15")]),s("br"),s("span",{staticClass:"line-number"},[t._v("16")]),s("br"),s("span",{staticClass:"line-number"},[t._v("17")]),s("br"),s("span",{staticClass:"line-number"},[t._v("18")]),s("br"),s("span",{staticClass:"line-number"},[t._v("19")]),s("br"),s("span",{staticClass:"line-number"},[t._v("20")]),s("br"),s("span",{staticClass:"line-number"},[t._v("21")]),s("br"),s("span",{staticClass:"line-number"},[t._v("22")]),s("br"),s("span",{staticClass:"line-number"},[t._v("23")]),s("br"),s("span",{staticClass:"line-number"},[t._v("24")]),s("br"),s("span",{staticClass:"line-number"},[t._v("25")]),s("br"),s("span",{staticClass:"line-number"},[t._v("26")]),s("br")])]),s("p",[s("code",[t._v("queueInLoop")]),t._v("的实现也有很多细节，首先可以看到在局部区域生成一个互斥锁（支持"),s("code",[t._v("RALL")]),t._v("），然后再进行任务队列加入新任务的操作。 这是因为可能此"),s("code",[t._v("EventLoop")]),t._v("会被多个线程所操纵，假设多个线程调用"),s("code",[t._v("loop->queueInLoop(cb)")]),t._v("，都向此任务队列加入自己的回调函数，这势必会有线程间的竞争情况。需要在此处用一个互斥锁保证互斥，可以看到这个锁的粒度比较小。")]),t._v(" "),s("p",[s("code",[t._v("callingPendingFunctors_")]),t._v(" 这个标志位在 "),s("code",[t._v("EventLoop::doPendingFunctors()")]),t._v(" 函数中被标记为 true。 "),s("strong",[t._v("也就是说如果 EventLoop 正在处理当前的 PendingFunctors 函数时有新的回调函数加入，我们也要继续唤醒。")]),t._v(" 倘若不唤醒，那么新加入的函数就不会得到处理，会因为下一轮的 epoll_wait 而继续阻塞住，这显然会降低效率。这也是一个 muduo 的细节。 继续探索 "),s("code",[t._v("wakeup()")]),t._v(" 函数，从其名字就很容易看出来，这是唤醒其他线程的操作。如何唤醒那个"),s("code",[t._v("EventLoop")]),t._v("的所在线程呢，其实只要往其 "),s("code",[t._v("wakeupFd_")]),t._v("写数据就行。")]),t._v(" "),s("p",[t._v("每个"),s("code",[t._v("EventLoop")]),t._v("的"),s("code",[t._v("wakeupFd_")]),t._v("都被加入到"),s("code",[t._v("epoll")]),t._v("对象中，只要写了数据就会触发读事件，"),s("code",[t._v("epoll_wait")]),t._v("就会返回。因此"),s("code",[t._v("EventLoop::loop")]),t._v("中阻塞的情况被打断，"),s("code",[t._v("Reactor")]),t._v("又被事件「驱动」了起来。")]),t._v(" "),s("div",{staticClass:"language-cpp line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-cpp"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("EventLoop")]),s("span",{pre:!0,attrs:{class:"token double-colon punctuation"}},[t._v("::")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("wakeup")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 可以看到写的数据很少，纯粹是为了通知有事件产生")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("uint64_t")]),t._v(" one "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    ssize_t n "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" sockets"),s("span",{pre:!0,attrs:{class:"token double-colon punctuation"}},[t._v("::")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("write")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("wakeupFd_"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v("one"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("sizeof")]),t._v(" one"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("n "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("sizeof")]),t._v(" one"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        LOG_ERROR "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<<")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"EventLoop::wakeup() writes "')]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<<")]),t._v(" n "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<<")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('" bytes instead of 8"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br"),s("span",{staticClass:"line-number"},[t._v("5")]),s("br"),s("span",{staticClass:"line-number"},[t._v("6")]),s("br"),s("span",{staticClass:"line-number"},[t._v("7")]),s("br"),s("span",{staticClass:"line-number"},[t._v("8")]),s("br"),s("span",{staticClass:"line-number"},[t._v("9")]),s("br"),s("span",{staticClass:"line-number"},[t._v("10")]),s("br")])]),s("p",[t._v("这里可以看另一个例子，"),s("code",[t._v("TcpServer")]),t._v("的销毁连接操作。会在"),s("code",[t._v("baseLoop")]),t._v("中获取需要销毁的连接所在的"),s("code",[t._v("ioLoop/")]),t._v("，然后让"),s("code",[t._v("ioLoop")]),t._v("执行销毁操作，细节可以看注释。")]),t._v(" "),s("div",{staticClass:"language-cpp line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-cpp"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("TcpServer")]),s("span",{pre:!0,attrs:{class:"token double-colon punctuation"}},[t._v("::")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("removeConnectionInLoop")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" TcpConnectionPtr"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v(" conn"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  loop_"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("assertInLoopThread")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  LOG_INFO "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<<")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"TcpServer::removeConnectionInLoop ["')]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<<")]),t._v(" name_\n           "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<<")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"] - connection "')]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<<")]),t._v(" conn"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("name")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 从map删除")]),t._v("\n  size_t n "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" connections_"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("erase")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("conn"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("name")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("assert")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("n "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 获取subLoop")]),t._v("\n  EventLoop"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" ioLoop "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" conn"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("getLoop")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/**\n   * subLoop调用TcpConnection::connectDestroyed\n   * 因为是在baseLoop的线程里调用subLoop的函数，所以不能同步调用，需要放入队列\n   * 在加锁的环境下将此回调哈函数保存到subLoop的pendingFunctors_中并唤醒\n   * 那么这个唤醒就是在baseLoop的线程里调用subLoop::wakeup写数据给subLoop的wakeFd,subLoop的主事件循环被唤醒执行pendingFunctors_\n   * 而baseLoop线程在wakeup写完数据之后就没有继续往下执行了，这就保证整个函数只被subloop线程执行\n   * 保证了线程的安全\n   */")]),t._v("\n  ioLoop"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("queueInLoop")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("\n      std"),s("span",{pre:!0,attrs:{class:"token double-colon punctuation"}},[t._v("::")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("bind")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v("TcpConnection"),s("span",{pre:!0,attrs:{class:"token double-colon punctuation"}},[t._v("::")]),t._v("connectDestroyed"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" conn"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br"),s("span",{staticClass:"line-number"},[t._v("5")]),s("br"),s("span",{staticClass:"line-number"},[t._v("6")]),s("br"),s("span",{staticClass:"line-number"},[t._v("7")]),s("br"),s("span",{staticClass:"line-number"},[t._v("8")]),s("br"),s("span",{staticClass:"line-number"},[t._v("9")]),s("br"),s("span",{staticClass:"line-number"},[t._v("10")]),s("br"),s("span",{staticClass:"line-number"},[t._v("11")]),s("br"),s("span",{staticClass:"line-number"},[t._v("12")]),s("br"),s("span",{staticClass:"line-number"},[t._v("13")]),s("br"),s("span",{staticClass:"line-number"},[t._v("14")]),s("br"),s("span",{staticClass:"line-number"},[t._v("15")]),s("br"),s("span",{staticClass:"line-number"},[t._v("16")]),s("br"),s("span",{staticClass:"line-number"},[t._v("17")]),s("br"),s("span",{staticClass:"line-number"},[t._v("18")]),s("br"),s("span",{staticClass:"line-number"},[t._v("19")]),s("br"),s("span",{staticClass:"line-number"},[t._v("20")]),s("br"),s("span",{staticClass:"line-number"},[t._v("21")]),s("br"),s("span",{staticClass:"line-number"},[t._v("22")]),s("br")])]),s("h2",{attrs:{id:"_28-如何解决死锁"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_28-如何解决死锁"}},[t._v("#")]),t._v(" 28.如何解决死锁？")]),t._v(" "),s("ol",[s("li",[t._v("死锁: 是指多个进程在执行过程中，因争夺资源而造成了互相等待。此时系统产生了死锁。比如两\n只羊过独木桥，若两只羊互不相让，争着过桥，就产生死锁。")]),t._v(" "),s("li",[t._v("产生的条件：死锁发生有四个必要条件：\n（1）互斥条件：进程对所分配到的资源不允许其他进程访问，若其他进程访问，只能等待，直到\n进程使用完成后释放该资源；\n（2）请求保持条件：进程获得一定资源后，又对其他资源发出请求，但该资源被其他进程占有，\n此时请求阻塞，而且该进程不会释放自己已经占有的资源；\n（3）不可剥夺条件：进程已获得的资源，只能自己释放，不可剥夺；\n（4）环路等待条件：若干进程之间形成一种头尾相接的循环等待资源关系")]),t._v(" "),s("li",[t._v("如何解决：\n（1）资源一次性分配，从而解决请求保持的问题\n（2）可剥夺资源：当进程新的资源未得到满足时，释放已有的资源；\n（3）资源有序分配：资源按序号递增，进程请求按递增请求，释放则相反。")])]),t._v(" "),s("p",[t._v("答案解析\n举个例子，比如：如果此时有两个线程T1和T2，它们分别占有R1和R2资源\n此时，T1请求R2资源的同时，T2请求R1资源。\n这个时候T2说：你把R1给我，我就给你R2\nT1说：不行，你要先给我R2，我才能给你R1\n那么就这样，死锁产生了。如下图：")]),t._v(" "),s("p",[s("img",{attrs:{src:"/assets/1692623209379.png",alt:"1692623209379"}})]),t._v(" "),s("h2",{attrs:{id:"_29-怎么进行压测的"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_29-怎么进行压测的"}},[t._v("#")]),t._v(" 29.怎么进行压测的？")]),t._v(" "),s("p",[t._v("在example中使用mymuduo实现了http服务器（只是简单的通过/hello返回hello world），使用apache benchmark对此http服务器进行压力测试，可以测试网络库的并发处理能力 在本人笔记本上（CPU i5-6200U）使用ab进行测压（setThreadNums = 4）")]),t._v(" "),s("div",{staticClass:"language-shell line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-shell"}},[s("code",[t._v("ab "),s("span",{pre:!0,attrs:{class:"token parameter variable"}},[t._v("-n")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1000000")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token parameter variable"}},[t._v("-c")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1000")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token parameter variable"}},[t._v("-k")]),t._v(" http://127.0.0.1:8000/hello\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br")])]),s("p",[t._v("这是用于 ApacheBench 工具（ab）的命令，用于评估 Web 服务器的性能，特别是针对 HTTP 和 HTTPS 协议。它通过向服务器发送指定数量的请求并测量响应时间来模拟同时访问网站的负载情况。")]),t._v(" "),s("p",[t._v("让我们解析一下命令的组成部分：")]),t._v(" "),s("ul",[s("li",[s("code",[t._v("-n 1000000")]),t._v("：此选项指定要发送的请求数量。在这种情况下，将发送一百万个请求。")]),t._v(" "),s("li",[s("code",[t._v("-c 1000")]),t._v("：此选项设置并发级别，指定同时发送多少个请求。在这里，会同时发送一千个请求。")]),t._v(" "),s("li",[s("code",[t._v("-k")]),t._v("：此选项启用 HTTP KeepAlive 功能，允许多个请求通过单个连接发送。")]),t._v(" "),s("li",[s("code",[t._v("http://127.0.0.1:8000/hello")]),t._v("：这是您要测试的服务器端点的 URL。在这种情况下，它被设置为 "),s("code",[t._v("http://127.0.0.1:8000/hello")]),t._v("。")])]),t._v(" "),s("p",[t._v("因此，通过运行此命令，您将向指定的 URL 发送一百万个请求，并且并发级别为 1000。KeepAlive 功能将被启用，允许通过单个连接发送多个请求。")]),t._v(" "),s("h2",{attrs:{id:"_30-为什么要用非阻塞io"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_30-为什么要用非阻塞io"}},[t._v("#")]),t._v(" 30.为什么要用非阻塞io？")]),t._v(" "),s("p",[t._v("muduo库使用非阻塞IO的优势在于，它可以提高应用程序的并发性能。")]),t._v(" "),s("p",[t._v("当应用程序等待I/O操作完成时，非阻塞IO可以让应用程序继续处理其他任务，从而提高应用程序的吞吐量和响应速度  。")]),t._v(" "),s("h2",{attrs:{id:"_36、日志宏定义"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_36、日志宏定义"}},[t._v("#")]),t._v(" 36、日志宏定义")]),t._v(" "),s("div",{staticClass:"language-cpp line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-cpp"}},[s("code",[s("span",{pre:!0,attrs:{class:"token macro property"}},[s("span",{pre:!0,attrs:{class:"token directive-hash"}},[t._v("#")]),s("span",{pre:!0,attrs:{class:"token directive keyword"}},[t._v("ifdef")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token expression"}},[t._v("MYMUDUO_DEBUG")])]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token macro property"}},[s("span",{pre:!0,attrs:{class:"token directive-hash"}},[t._v("#")]),s("span",{pre:!0,attrs:{class:"token directive keyword"}},[t._v("define")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token macro-name function"}},[t._v("LOG_DEBUG")]),s("span",{pre:!0,attrs:{class:"token expression"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("logmsgFormat"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" ")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("\\")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token expression"}},[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("do")]),t._v(" ")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("\\")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token expression"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" ")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("\\")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token expression"}},[t._v("Logger "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v("logger "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Logger")]),s("span",{pre:!0,attrs:{class:"token double-colon punctuation"}},[t._v("::")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("instance")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" ")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("\\")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token expression"}},[t._v("logger"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("setLogLevel")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("DEBUG"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" ")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("\\")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token expression"}},[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("char")]),t._v(" buf"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1024")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" ")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("\\")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token expression"}},[s("span",{pre:!0,attrs:{class:"token function"}},[t._v("snprintf")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("buf"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1024")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" logmsgFormat"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" ")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("##")]),s("span",{pre:!0,attrs:{class:"token expression"}},[t._v("__VA_ARGS__"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" ")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("\\")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token expression"}},[t._v("logger"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("buf"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" ")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("\\")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token expression"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("while")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" ")])]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token macro property"}},[s("span",{pre:!0,attrs:{class:"token directive-hash"}},[t._v("#")]),s("span",{pre:!0,attrs:{class:"token directive keyword"}},[t._v("else")])]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token macro property"}},[s("span",{pre:!0,attrs:{class:"token directive-hash"}},[t._v("#")]),s("span",{pre:!0,attrs:{class:"token directive keyword"}},[t._v("define")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token macro-name function"}},[t._v("LOG_DEBUG")]),s("span",{pre:!0,attrs:{class:"token expression"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("logmsgFormat"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")])])]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token macro property"}},[s("span",{pre:!0,attrs:{class:"token directive-hash"}},[t._v("#")]),s("span",{pre:!0,attrs:{class:"token directive keyword"}},[t._v("endif")])]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br"),s("span",{staticClass:"line-number"},[t._v("5")]),s("br"),s("span",{staticClass:"line-number"},[t._v("6")]),s("br"),s("span",{staticClass:"line-number"},[t._v("7")]),s("br"),s("span",{staticClass:"line-number"},[t._v("8")]),s("br"),s("span",{staticClass:"line-number"},[t._v("9")]),s("br"),s("span",{staticClass:"line-number"},[t._v("10")]),s("br"),s("span",{staticClass:"line-number"},[t._v("11")]),s("br"),s("span",{staticClass:"line-number"},[t._v("12")]),s("br"),s("span",{staticClass:"line-number"},[t._v("13")]),s("br")])]),s("p",[t._v("代码段中使用了预处理指令来定义一个调试日志宏 "),s("code",[t._v("LOG_DEBUG")]),t._v("。这个宏的定义取决于是否定义了 "),s("code",[t._v("MYMUDUO_DEBUG")]),t._v(" 符号。")]),t._v(" "),s("ul",[s("li",[s("p",[t._v("如果 "),s("code",[t._v("MYMUDUO_DEBUG")]),t._v(" 被定义（例如，在编译命令行中使用 "),s("code",[t._v("-DMYMUDUO_DEBUG")]),t._v(" 或者在代码的某个地方使用 "),s("code",[t._v("#define MYMUDUO_DEBUG")]),t._v("），那么 "),s("code",[t._v("LOG_DEBUG")]),t._v(" 宏将会被定义为一个包含实际日志代码的块。")])]),t._v(" "),s("li",[s("p",[t._v("如果 "),s("code",[t._v("MYMUDUO_DEBUG")]),t._v(" 没有被定义，那么 "),s("code",[t._v("LOG_DEBUG")]),t._v(" 宏将被定义为空，这意味着在代码中调用 "),s("code",[t._v("LOG_DEBUG")]),t._v(" 将不会产生任何效果。")])])]),t._v(" "),s("p",[t._v("简而言之，"),s("code",[t._v("ifdef")]),t._v(" 里的内容能成立的条件是 "),s("code",[t._v("MYMUDUO_DEBUG")]),t._v(" 被定义了。如果你想在调试构建中启用这些日志，你可以定义这个符号；如果你想在发布构建中禁用这些日志，你可以确保这个符号未被定义。")]),t._v(" "),s("h2",{attrs:{id:"_38、shared-from-this"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_38、shared-from-this"}},[t._v("#")]),t._v(" 38、shared_from_this()")]),t._v(" "),s("p",[s("code",[t._v("shared_from_this()")]),t._v(" 是 C++ 中 "),s("code",[t._v("std::enable_shared_from_this")]),t._v(" 类模板提供的一个成员函数，用于从一个类实例中获取一个 "),s("code",[t._v("std::shared_ptr")]),t._v("，以确保在共享所有权的情况下访问该实例。这通常在一个类的成员函数中使用，以避免通过裸指针来获取智能指针，从而更安全地管理对象的生命周期。")]),t._v(" "),s("p",[t._v("以下是 "),s("code",[t._v("std::enable_shared_from_this")]),t._v(" 的一些重要信息：")]),t._v(" "),s("ol",[s("li",[s("p",[s("strong",[s("code",[t._v("std::enable_shared_from_this")]),t._v(" 类模板")]),t._v("：\n"),s("code",[t._v("std::enable_shared_from_this")]),t._v(" 是一个模板类，你需要将它作为你自己的类的基类。这样，你的类就会继承 "),s("code",[t._v("std::enable_shared_from_this")]),t._v(" 提供的一些功能。")])]),t._v(" "),s("li",[s("p",[s("strong",[s("code",[t._v("shared_from_this()")]),t._v(" 成员函数")]),t._v("：\n在继承了 "),s("code",[t._v("std::enable_shared_from_this")]),t._v(" 的类中，你可以调用 "),s("code",[t._v("shared_from_this()")]),t._v(" 成员函数，该函数返回一个 "),s("code",[t._v("std::shared_ptr")]),t._v(" 智能指针，指向当前实例。这样，你就可以在不担心对象生命周期管理的情况下使用智能指针，而不是使用裸指针。")])]),t._v(" "),s("li",[s("p",[s("strong",[t._v("注意事项")]),t._v("：")]),t._v(" "),s("ul",[s("li",[t._v("使用 "),s("code",[t._v("shared_from_this()")]),t._v(" 前提是，你必须已经通过 "),s("code",[t._v("std::shared_ptr")]),t._v(" 创建了这个对象的共享指针，然后才能在对象的成员函数中使用 "),s("code",[t._v("shared_from_this()")]),t._v("。")]),t._v(" "),s("li",[t._v("如果在对象的构造函数中尝试使用 "),s("code",[t._v("shared_from_this()")]),t._v("，会导致未定义行为，因为此时尚未构造出有效的 "),s("code",[t._v("shared_ptr")]),t._v("。")])])])]),t._v(" "),s("p",[t._v("以下是一个使用 "),s("code",[t._v("shared_from_this()")]),t._v(" 的简单示例：")]),t._v(" "),s("div",{staticClass:"language-cpp line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-cpp"}},[s("code",[s("span",{pre:!0,attrs:{class:"token macro property"}},[s("span",{pre:!0,attrs:{class:"token directive-hash"}},[t._v("#")]),s("span",{pre:!0,attrs:{class:"token directive keyword"}},[t._v("include")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("<iostream>")])]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token macro property"}},[s("span",{pre:!0,attrs:{class:"token directive-hash"}},[t._v("#")]),s("span",{pre:!0,attrs:{class:"token directive keyword"}},[t._v("include")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("<memory>")])]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("MyClass")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token base-clause"}},[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" std"),s("span",{pre:!0,attrs:{class:"token double-colon punctuation"}},[t._v("::")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("enable_shared_from_this")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("MyClass")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")])]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("doSomething")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        std"),s("span",{pre:!0,attrs:{class:"token double-colon punctuation"}},[t._v("::")]),t._v("shared_ptr"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("MyClass"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" sharedPtr "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("shared_from_this")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 使用 sharedPtr 进行操作，不需要担心对象的生命周期")]),t._v("\n        std"),s("span",{pre:!0,attrs:{class:"token double-colon punctuation"}},[t._v("::")]),t._v("cout "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<<")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Doing something with MyClass"')]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<<")]),t._v(" std"),s("span",{pre:!0,attrs:{class:"token double-colon punctuation"}},[t._v("::")]),t._v("endl"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("main")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    std"),s("span",{pre:!0,attrs:{class:"token double-colon punctuation"}},[t._v("::")]),t._v("shared_ptr"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("MyClass"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" obj "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" std"),s("span",{pre:!0,attrs:{class:"token double-colon punctuation"}},[t._v("::")]),s("span",{pre:!0,attrs:{class:"token generic-function"}},[s("span",{pre:!0,attrs:{class:"token function"}},[t._v("make_shared")]),s("span",{pre:!0,attrs:{class:"token generic class-name"}},[s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("MyClass"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")])])]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    obj"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("doSomething")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br"),s("span",{staticClass:"line-number"},[t._v("5")]),s("br"),s("span",{staticClass:"line-number"},[t._v("6")]),s("br"),s("span",{staticClass:"line-number"},[t._v("7")]),s("br"),s("span",{staticClass:"line-number"},[t._v("8")]),s("br"),s("span",{staticClass:"line-number"},[t._v("9")]),s("br"),s("span",{staticClass:"line-number"},[t._v("10")]),s("br"),s("span",{staticClass:"line-number"},[t._v("11")]),s("br"),s("span",{staticClass:"line-number"},[t._v("12")]),s("br"),s("span",{staticClass:"line-number"},[t._v("13")]),s("br"),s("span",{staticClass:"line-number"},[t._v("14")]),s("br"),s("span",{staticClass:"line-number"},[t._v("15")]),s("br"),s("span",{staticClass:"line-number"},[t._v("16")]),s("br"),s("span",{staticClass:"line-number"},[t._v("17")]),s("br"),s("span",{staticClass:"line-number"},[t._v("18")]),s("br")])]),s("p",[t._v("在这个示例中，"),s("code",[t._v("MyClass")]),t._v(" 继承了 "),s("code",[t._v("std::enable_shared_from_this<MyClass>")]),t._v("，然后在 "),s("code",[t._v("doSomething()")]),t._v(" 中使用了 "),s("code",[t._v("shared_from_this()")]),t._v(" 来获取一个智能指针，以确保在操作对象时对象的生命周期得到正确管理。")]),t._v(" "),s("h2",{attrs:{id:"_40、std-search"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_40、std-search"}},[t._v("#")]),t._v(" 40、std::search")]),t._v(" "),s("p",[t._v("当使用 "),s("code",[t._v("std::search")]),t._v(" 函数时，以下是有关头文件、函数描述、输入参数和输出的详细解释：")]),t._v(" "),s("p",[s("strong",[t._v("头文件")]),t._v("：为了使用 "),s("code",[t._v("std::search")]),t._v(" 函数，你需要包含 "),s("code",[t._v("<algorithm>")]),t._v(" 头文件：")]),t._v(" "),s("div",{staticClass:"language-cpp line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-cpp"}},[s("code",[s("span",{pre:!0,attrs:{class:"token macro property"}},[s("span",{pre:!0,attrs:{class:"token directive-hash"}},[t._v("#")]),s("span",{pre:!0,attrs:{class:"token directive keyword"}},[t._v("include")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("<algorithm>")])]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br")])]),s("p",[s("strong",[t._v("函数描述")]),t._v("："),s("code",[t._v("std::search")]),t._v(" 函数用于在一个序列中查找另一个序列的出现位置。它在主序列中查找子序列的第一个匹配位置。如果找到匹配的子序列，它返回一个指向主序列中匹配子序列的起始位置的迭代器；否则，返回主序列的 "),s("code",[t._v("last1")]),t._v(" 迭代器。")]),t._v(" "),s("p",[s("strong",[t._v("输入参数")]),t._v("：")]),t._v(" "),s("ul",[s("li",[s("code",[t._v("first1")]),t._v(" 和 "),s("code",[t._v("last1")]),t._v("：这两个参数定义了主序列的迭代器范围。"),s("code",[t._v("first1")]),t._v(" 是主序列的起始迭代器，"),s("code",[t._v("last1")]),t._v(" 是主序列的结束迭代器（不包含）。")]),t._v(" "),s("li",[s("code",[t._v("first2")]),t._v(" 和 "),s("code",[t._v("last2")]),t._v("：这两个参数定义了子序列的迭代器范围。"),s("code",[t._v("first2")]),t._v(" 是子序列的起始迭代器，"),s("code",[t._v("last2")]),t._v(" 是子序列的结束迭代器（不包含）。")])]),t._v(" "),s("p",[s("strong",[t._v("输出")]),t._v("："),s("code",[t._v("std::search")]),t._v(" 函数的返回值是一个迭代器，指向主序列中第一个匹配子序列的位置。如果找不到匹配，返回 "),s("code",[t._v("last1")]),t._v("。")]),t._v(" "),s("p",[t._v("以下是使用 "),s("code",[t._v("std::search")]),t._v(" 函数的示例，包括头文件、函数调用、输入参数和输出的解释：")]),t._v(" "),s("div",{staticClass:"language-cpp line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-cpp"}},[s("code",[s("span",{pre:!0,attrs:{class:"token macro property"}},[s("span",{pre:!0,attrs:{class:"token directive-hash"}},[t._v("#")]),s("span",{pre:!0,attrs:{class:"token directive keyword"}},[t._v("include")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("<algorithm>")])]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token macro property"}},[s("span",{pre:!0,attrs:{class:"token directive-hash"}},[t._v("#")]),s("span",{pre:!0,attrs:{class:"token directive keyword"}},[t._v("include")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("<iostream>")])]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token macro property"}},[s("span",{pre:!0,attrs:{class:"token directive-hash"}},[t._v("#")]),s("span",{pre:!0,attrs:{class:"token directive keyword"}},[t._v("include")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("<vector>")])]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("main")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    std"),s("span",{pre:!0,attrs:{class:"token double-colon punctuation"}},[t._v("::")]),t._v("vector"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" mainSequence "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("4")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("5")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("6")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("7")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("8")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    std"),s("span",{pre:!0,attrs:{class:"token double-colon punctuation"}},[t._v("::")]),t._v("vector"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" subSequence "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("5")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("6")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("7")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("auto")]),t._v(" result "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" std"),s("span",{pre:!0,attrs:{class:"token double-colon punctuation"}},[t._v("::")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("search")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("mainSequence"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("begin")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" mainSequence"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("end")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n                              subSequence"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("begin")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" subSequence"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("end")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("result "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!=")]),t._v(" mainSequence"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("end")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        std"),s("span",{pre:!0,attrs:{class:"token double-colon punctuation"}},[t._v("::")]),t._v("cout "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<<")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Subsequence found at position: "')]),t._v("\n                  "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<<")]),t._v(" std"),s("span",{pre:!0,attrs:{class:"token double-colon punctuation"}},[t._v("::")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("distance")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("mainSequence"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("begin")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" result"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<<")]),t._v(" std"),s("span",{pre:!0,attrs:{class:"token double-colon punctuation"}},[t._v("::")]),t._v("endl"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("else")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        std"),s("span",{pre:!0,attrs:{class:"token double-colon punctuation"}},[t._v("::")]),t._v("cout "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<<")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Subsequence not found."')]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<<")]),t._v(" std"),s("span",{pre:!0,attrs:{class:"token double-colon punctuation"}},[t._v("::")]),t._v("endl"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br"),s("span",{staticClass:"line-number"},[t._v("5")]),s("br"),s("span",{staticClass:"line-number"},[t._v("6")]),s("br"),s("span",{staticClass:"line-number"},[t._v("7")]),s("br"),s("span",{staticClass:"line-number"},[t._v("8")]),s("br"),s("span",{staticClass:"line-number"},[t._v("9")]),s("br"),s("span",{staticClass:"line-number"},[t._v("10")]),s("br"),s("span",{staticClass:"line-number"},[t._v("11")]),s("br"),s("span",{staticClass:"line-number"},[t._v("12")]),s("br"),s("span",{staticClass:"line-number"},[t._v("13")]),s("br"),s("span",{staticClass:"line-number"},[t._v("14")]),s("br"),s("span",{staticClass:"line-number"},[t._v("15")]),s("br"),s("span",{staticClass:"line-number"},[t._v("16")]),s("br"),s("span",{staticClass:"line-number"},[t._v("17")]),s("br"),s("span",{staticClass:"line-number"},[t._v("18")]),s("br"),s("span",{staticClass:"line-number"},[t._v("19")]),s("br"),s("span",{staticClass:"line-number"},[t._v("20")]),s("br")])]),s("p",[t._v("在这个示例中：")]),t._v(" "),s("ul",[s("li",[s("code",[t._v("mainSequence")]),t._v(" 是主序列，"),s("code",[t._v("subSequence")]),t._v(" 是子序列。")]),t._v(" "),s("li",[s("code",[t._v("result")]),t._v(" 是 "),s("code",[t._v("std::search")]),t._v(" 函数的返回值，它是一个指向主序列中匹配子序列的起始位置的迭代器。")]),t._v(" "),s("li",[t._v("如果找到匹配，使用 "),s("code",[t._v("std::distance")]),t._v(" 计算迭代器之间的距离，得到匹配位置。")]),t._v(" "),s("li",[t._v('如果找不到匹配，输出 "Subsequence not found."。')])]),t._v(" "),s("p",[t._v("这个示例演示了如何使用 "),s("code",[t._v("std::search")]),t._v(" 函数查找子序列在主序列中的位置。")]),t._v(" "),s("h2",{attrs:{id:"_42、findcrlf一直为null-针对数独的例子"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_42、findcrlf一直为null-针对数独的例子"}},[t._v("#")]),t._v(" 42、findcrlf一直为null，针对数独的例子")]),t._v(" "),s("h3",{attrs:{id:"问题"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#问题"}},[t._v("#")]),t._v(" "),s("strong",[t._v("问题")])]),t._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v('p peek()\n$16 = 0x55555559e208 "1\\\\r\\\\n\\n"\np beginWrite()\n$18 = 0x55555559e20e ""\n\np kCRLF\n$20 = 0x55555557bc78 <muduo::net::Buffer::kCRLF> "\\r\\n"\np kCRLF+2\n$21 = 0x55555557bc7a <muduo::net::Buffer::kCRLF+2> ""\n\n为什么const char* crlf = std::search(peek(), beginWrite(), kCRLF, kCRLF+2);返回的是\np crlf\n$22 = 0x55555559e20e ""\n我调试打印的内容是这样的为什么找不到内容\n')])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br"),s("span",{staticClass:"line-number"},[t._v("5")]),s("br"),s("span",{staticClass:"line-number"},[t._v("6")]),s("br"),s("span",{staticClass:"line-number"},[t._v("7")]),s("br"),s("span",{staticClass:"line-number"},[t._v("8")]),s("br"),s("span",{staticClass:"line-number"},[t._v("9")]),s("br"),s("span",{staticClass:"line-number"},[t._v("10")]),s("br"),s("span",{staticClass:"line-number"},[t._v("11")]),s("br"),s("span",{staticClass:"line-number"},[t._v("12")]),s("br"),s("span",{staticClass:"line-number"},[t._v("13")]),s("br"),s("span",{staticClass:"line-number"},[t._v("14")]),s("br")])]),s("h3",{attrs:{id:"原因1"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#原因1"}},[t._v("#")]),t._v(" "),s("strong",[t._v("原因1")])]),t._v(" "),s("p",[t._v("根据你提供的信息和调试输出，我们可以进行一些进一步的分析。")]),t._v(" "),s("p",[t._v("从你的调试输出来看：")]),t._v(" "),s("ul",[s("li",[s("code",[t._v("peek()")]),t._v(" 返回的字符串是 "),s("code",[t._v('"1\\\\r\\\\n\\n"')])]),t._v(" "),s("li",[s("code",[t._v("beginWrite()")]),t._v(" 返回的是一个空字符串 "),s("code",[t._v('""')])]),t._v(" "),s("li",[s("code",[t._v("kCRLF")]),t._v(" 的内容是 "),s("code",[t._v('"\\r\\n"')])]),t._v(" "),s("li",[s("code",[t._v("kCRLF+2")]),t._v(" 的内容是一个空字符串 "),s("code",[t._v('""')])])]),t._v(" "),s("p",[t._v("你的代码逻辑是使用 "),s("code",[t._v("std::search")]),t._v(" 函数在从 "),s("code",[t._v("peek()")]),t._v(" 到 "),s("code",[t._v("beginWrite()")]),t._v(" 的范围内搜索是否存在 "),s("code",[t._v("kCRLF")]),t._v(" 序列。但是，根据你提供的数据，这个范围似乎并不包含匹配的 "),s("code",[t._v("kCRLF")]),t._v(" 序列。")]),t._v(" "),s("p",[t._v("从输出中可以看出，"),s("code",[t._v("peek()")]),t._v(" 返回的字符串是 "),s("code",[t._v('"1\\\\r\\\\n\\n"')]),t._v("，这表示字符串中包含了一些转义字符。具体来说，"),s("code",[t._v('"\\\\r\\\\n"')]),t._v(" 表示两个字符 "),s("code",[t._v("\\r")]),t._v(" 和 "),s("code",[t._v("\\n")]),t._v("，而不是回车换行符。")]),t._v(" "),s("p",[t._v("而 "),s("code",[t._v("kCRLF")]),t._v(" 的内容是 "),s("code",[t._v('"\\r\\n"')]),t._v("，表示一个回车换行符。由于 "),s("code",[t._v("std::search")]),t._v(" 在搜索过程中要考虑字符串中的字符一一匹配，因此 "),s("code",[t._v('"\\\\r\\\\n"')]),t._v(" 和 "),s("code",[t._v('"\\r\\n"')]),t._v(" 并不相等。")]),t._v(" "),s("p",[t._v("所以，在你的情况下，"),s("code",[t._v("std::search")]),t._v(" 并不会在这个范围内找到匹配的 "),s("code",[t._v("kCRLF")]),t._v(" 序列，因此返回的 "),s("code",[t._v("crlf")]),t._v(" 指针仍然是空指针。")]),t._v(" "),s("p",[t._v("你需要确认 "),s("code",[t._v("peek()")]),t._v(" 返回的字符串中实际包含了怎样的字符，以及你的代码逻辑是否需要处理转义字符。如果你希望在搜索中找到回车换行符，你可以将 "),s("code",[t._v("kCRLF")]),t._v(" 初始化为 "),s("code",[t._v('"\\\\r\\\\n"')]),t._v("，以便与 "),s("code",[t._v("peek()")]),t._v(" 返回的字符串相匹配。")]),t._v(" "),s("h3",{attrs:{id:"原因2"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#原因2"}},[t._v("#")]),t._v(" "),s("strong",[t._v("原因2")])]),t._v(" "),s("p",[t._v("在终端里直接输入"),s("code",[t._v("1\\r\\n")]),t._v("，会被识别成"),s("code",[t._v("1\\\\r\\\\n\\n")]),t._v("，")]),t._v(" "),s("p",[s("code",[t._v("\\\\")]),t._v(" 是对 "),s("code",[t._v("\\")]),t._v(" 的转义，能正确输出 "),s("code",[t._v("\\")])]),t._v(" "),s("h3",{attrs:{id:"原因3"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#原因3"}},[t._v("#")]),t._v(" "),s("strong",[t._v("原因3")])]),t._v(" "),s("p",[t._v("在 "),s("code",[t._v("nc")]),t._v(" 中，回车键通常被解释为换行字符（"),s("code",[t._v("\\n")]),t._v("），而在 "),s("code",[t._v("telnet")]),t._v(" 中，回车键通常被解释为回车和换行字符的组合（"),s("code",[t._v("\\r\\n")]),t._v("）。")]),t._v(" "),s("h3",{attrs:{id:"最后解决办法"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#最后解决办法"}},[t._v("#")]),t._v(" 最后解决办法")]),t._v(" "),s("p",[t._v("利用telnet连接，输完数字后直接回车，这样能被识别成"),s("code",[t._v("\\r\\n")])])])}),[],!1,null,null,null);s.default=e.exports}}]);