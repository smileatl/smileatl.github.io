(window.webpackJsonp=window.webpackJsonp||[]).push([[98],{415:function(s,t,a){"use strict";a.r(t);var n=a(7),e=Object(n.a)({},(function(){var s=this,t=s._self._c;return t("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[t("h2",{attrs:{id:"socket"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#socket"}},[s._v("#")]),s._v(" socket")]),s._v(" "),t("h3",{attrs:{id:"socket模型创建流程"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#socket模型创建流程"}},[s._v("#")]),s._v(" socket模型创建流程")]),s._v(" "),t("p",[s._v("IP地址：在网络环境中唯一标示一台主机")]),s._v(" "),t("p",[s._v("端口号：在主机中唯一标示一个过程")]),s._v(" "),t("p",[s._v("IP+port：在网络环境中唯一标示一个进程（socket）")]),s._v(" "),t("div",{staticClass:"language-txt line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-txt"}},[t("code",[s._v("socket是文件的一种类型：(伪文件，不会占用实际的存储空间)\n\n普通文件、目录、软链接实际占用了存储空间\n\n字符设备、块设备、管道、socket伪文件\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br")])]),t("p",[s._v("accept返回的才是真正跟客户端连接的socket")]),s._v(" "),t("p",[t("img",{attrs:{src:"/assets/1684739134073.png",alt:"1684739134073"}})]),s._v(" "),t("p",[s._v("server.c")]),s._v(" "),t("ol",[t("li",[s._v("socket()  建立套接字")]),s._v(" "),t("li",[s._v("bind()  绑定IP端口号  (struct socketaddr_in addr 初始化)")]),s._v(" "),t("li",[s._v("listen()  指定最大同时发起连接数")]),s._v(" "),t("li",[s._v("accept()  阻塞等待客户端发起连接")]),s._v(" "),t("li",[s._v("read()")]),s._v(" "),t("li",[s._v("小——大")]),s._v(" "),t("li",[s._v("write 给客户端")]),s._v(" "),t("li",[s._v("close()")])]),s._v(" "),t("p",[s._v("client.c")]),s._v(" "),t("ol",[t("li",[s._v("socket()")]),s._v(" "),t("li",[s._v("bind()  可以依赖”隐式绑定“")]),s._v(" "),t("li",[s._v("connect()  发起连接")]),s._v(" "),t("li",[s._v("write()")]),s._v(" "),t("li",[s._v("read()")]),s._v(" "),t("li",[s._v("close()")])]),s._v(" "),t("p",[s._v("bind(), accept(), connect()需要强转")]),s._v(" "),t("div",{staticClass:"language-C line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-c"}},[t("code",[t("span",{pre:!0,attrs:{class:"token macro property"}},[t("span",{pre:!0,attrs:{class:"token directive-hash"}},[s._v("#")]),t("span",{pre:!0,attrs:{class:"token directive keyword"}},[s._v("include")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v("<arpa/inet.h>")])]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("uint32_t")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("htonl")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("uint32_t")]),s._v(" hostlong"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("uint16_t")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("htons")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("uint16_t")]),s._v(" hostshort"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("uint32_t")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("ntohl")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("uint32_t")]),s._v(" netlong"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("uint16_t")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("ntohs")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("uint16_t")]),s._v(" netshort"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br")])]),t("p",[s._v("h表示host，n表示network，l表示32位长整数，s表示16位短整数。")]),s._v(" "),t("p",[s._v("32位对应的是IP地址，16位对应的是端口号")]),s._v(" "),t("p",[s._v("客户端的端口号是由操作系统来指定的")]),s._v(" "),t("h3",{attrs:{id:"socket函数"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#socket函数"}},[s._v("#")]),s._v(" socket函数")]),s._v(" "),t("h4",{attrs:{id:"accept"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#accept"}},[s._v("#")]),s._v(" accept")]),s._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v("#include<sys/types.h>\n#include<sys/socket.h>\n\nint accept(int s,struct sockaddr * addr,socklen_t * addrlen);\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br")])]),t("p",[s._v("描述：")]),s._v(" "),t("p",[s._v("accept()用来接受参数"),t("strong",[s._v("s")]),s._v("的socket连线。参数"),t("strong",[s._v("s")]),s._v("的socket必需先经bind()、listen()函数处理过, 当有连线进来时accept()会返回一个新的socket处理代码, 往后的数据传送与读取就是经由新的socket处理,")]),s._v(" "),t("p",[s._v("而原来参数"),t("strong",[s._v("s")]),s._v("的socket能继续使用accept()来接受新的连线要求。连线成功时, 参数"),t("strong",[s._v("addr")]),s._v("所指的结构会被系统填入远程主机的地址数据, 参数"),t("strong",[s._v("addrlen")]),s._v("为scokaddr的结构长度。关于结构sockaddr的定义请参考bind()。")]),s._v(" "),t("h4",{attrs:{id:"bind"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#bind"}},[s._v("#")]),s._v(" bind")]),s._v(" "),t("div",{staticClass:"language-c line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-c"}},[t("code",[t("span",{pre:!0,attrs:{class:"token macro property"}},[t("span",{pre:!0,attrs:{class:"token directive-hash"}},[s._v("#")]),t("span",{pre:!0,attrs:{class:"token directive keyword"}},[s._v("include")]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v("<sys/types.h>")])]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token macro property"}},[t("span",{pre:!0,attrs:{class:"token directive-hash"}},[s._v("#")]),t("span",{pre:!0,attrs:{class:"token directive keyword"}},[s._v("include")]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v("<sys/socket.h>")])]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("bind")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),s._v(" sockfd"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("struct")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("sockaddr")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v(" my_addr"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),s._v(" addrlen"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br")])]),t("p",[s._v("描述：")]),s._v(" "),t("p",[s._v("用于将一个套接字（socket）与一个特定的IP地址和端口号绑定在一起的函数。在网络编程中，服务器通常需要绑定一个特定的IP地址和端口号，以便客户端可以通过这个地址和端口号来访问服务器。")]),s._v(" "),t("p",[s._v("bind()用来设置给参数"),t("strong",[s._v("sockfd")]),s._v("的socket一个名称。此名称由参数"),t("strong",[s._v("my_addr")]),s._v("指向一sockaddr结构, 对于不同的socket, domain定义了一个通用的数据结构")]),s._v(" "),t("div",{staticClass:"language-c line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-c"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("struct")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("sockaddr")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("unsigned")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("short")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),s._v(" sa_family"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("char")]),s._v(" sa_data"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("14")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\nsa_family 为调用"),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("socket")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("时的domain参数"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" 即AF_xxxx值。\nsa_data 最多使用"),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("14")]),s._v("个字符长度。\n此sockaddr结构会因使用不同的socket domain而有不同结构定义"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" 例如使用AF_INET domain"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" 其socketaddr结构定义便为\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("struct")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("socketaddr_in")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("unsigned")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("short")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),s._v(" sin_family"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("uint16_t")]),s._v(" sin_port"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("struct")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("in_addr")]),s._v(" sin_addr"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("unsigned")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("char")]),s._v(" sin_zero"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("8")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("struct")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("in_addr")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("uint32_t")]),s._v(" s_addr"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\nsin_family 即为sa_family\nsin_port 为使用的port编号\nsin_addr"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("s_addr 为IP 地址\nsin_zero 未使用。\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br"),t("span",{staticClass:"line-number"},[s._v("11")]),t("br"),t("span",{staticClass:"line-number"},[s._v("12")]),t("br"),t("span",{staticClass:"line-number"},[s._v("13")]),t("br"),t("span",{staticClass:"line-number"},[s._v("14")]),t("br"),t("span",{staticClass:"line-number"},[s._v("15")]),t("br"),t("span",{staticClass:"line-number"},[s._v("16")]),t("br"),t("span",{staticClass:"line-number"},[s._v("17")]),t("br"),t("span",{staticClass:"line-number"},[s._v("18")]),t("br"),t("span",{staticClass:"line-number"},[s._v("19")]),t("br"),t("span",{staticClass:"line-number"},[s._v("20")]),t("br"),t("span",{staticClass:"line-number"},[s._v("21")]),t("br"),t("span",{staticClass:"line-number"},[s._v("22")]),t("br"),t("span",{staticClass:"line-number"},[s._v("23")]),t("br")])]),t("p",[s._v("参数：")]),s._v(" "),t("p",[s._v("addrlen为sockaddr的结构长度。")]),s._v(" "),t("p",[s._v("返回值：")]),s._v(" "),t("p",[s._v("成功则返回0, 失败返回-1, 错误原因存于errno中。")]),s._v(" "),t("h4",{attrs:{id:"connect"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#connect"}},[s._v("#")]),s._v(" connect()")]),s._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v("int connect(int sockfd, const struct sockaddr *addr, socklen_t addrlen);\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br")])]),t("p",[s._v("描述：")]),s._v(" "),t("p",[s._v("用于建立TCP连接的函数，它将本地的套接字连接到指定的远程套接字。在TCP连接中，客户端使用connect()函数向服务器发送连接请求，服务器使用accept()函数接受连接请求并建立连接。")]),s._v(" "),t("p",[s._v("参数：")]),s._v(" "),t("ul",[t("li",[s._v("sockfd是本地套接字描述符，")]),s._v(" "),t("li",[s._v("addr是指向远程套接字地址结构体的指针，")]),s._v(" "),t("li",[s._v("addrlen是远程套接字地址结构体的长度。")])]),s._v(" "),t("p",[s._v("返回值：")]),s._v(" "),t("p",[s._v("如果连接成功，该函数返回0，否则返回-1并设置errno变量以指示错误类型。")]),s._v(" "),t("h4",{attrs:{id:"listen"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#listen"}},[s._v("#")]),s._v(" listen")]),s._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v("#include<sys/socket.h>\nint listen(int s,int backlog);\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br")])]),t("p",[s._v("描述：")]),s._v(" "),t("p",[s._v("listen()用来等待参数"),t("strong",[s._v("s")]),s._v(" 的socket连线。参数"),t("strong",[s._v("backlog")]),s._v("指定同时能处理的最大连接要求, 如果连接数目达此上限则client端将收到ECONNREFUSED的错误。")]),s._v(" "),t("p",[s._v("Listen()并未开始接收连线, 只是设置socket为listen模式, 真正接收client端连线的是accept()。通常listen()会在socket(), bind()之后调用, 接着才调用accept()。")]),s._v(" "),t("h4",{attrs:{id:"recv"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#recv"}},[s._v("#")]),s._v(" recv")]),s._v(" "),t("div",{staticClass:"language-c line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-c"}},[t("code",[t("span",{pre:!0,attrs:{class:"token macro property"}},[t("span",{pre:!0,attrs:{class:"token directive-hash"}},[s._v("#")]),t("span",{pre:!0,attrs:{class:"token directive keyword"}},[s._v("include")]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v("<sys/types.h>")])]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token macro property"}},[t("span",{pre:!0,attrs:{class:"token directive-hash"}},[s._v("#")]),t("span",{pre:!0,attrs:{class:"token directive keyword"}},[s._v("include")]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v("<sys/socket.h>")])]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("recv")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),s._v(" s"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("void")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v("buf"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),s._v(" len"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("unsigned")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),s._v(" flags"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br")])]),t("p",[s._v("描述：")]),s._v(" "),t("p",[s._v("recv()用来接收远端主机经指定的"),t("strong",[s._v("socket")]),s._v("传来的数据, 并把数据存到由参数"),t("strong",[s._v("buf")]),s._v("指向的内存空间, 参数"),t("strong",[s._v("len")]),s._v("为可接收数据的最大长度。")]),s._v(" "),t("p",[s._v("flags一般设0。其他数值定义如下:\nMSG_OOB 接收以out-of-band 送出的数据。\nMSG_PEEK 返回来的数据并不会在系统内删除, 如果再调用recv()会返回相同的数据内容。\nMSG_WAITALL强迫接收到len大小的数据后才能返回, 除非有错误或信号产生。\nMSG_NOSIGNAL此操作不愿被SIGPIPE信号中断返回值成功则返回接收到的字符数, 失败返回-1, 错误原因存于errno中。")]),s._v(" "),t("p",[s._v("返回值：")]),s._v(" "),t("p",[s._v("成功则返回接收到的字符数, 失败返回-1, 错误原因存于errno中。")]),s._v(" "),t("p",[s._v("错误代码：")]),s._v(" "),t("p",[s._v("EBADF 参数s非合法的socket处理代码\nEFAULT 参数中有一指针指向无法存取的内存空间\nENOTSOCK 参数s为一文件描述词, 非socket。\nEINTR 被信号所中断\nEAGAIN 此动作会令进程阻断, 但参数s的socket为不可阻断\nENOBUFS 系统的缓冲内存不足。\nENOMEM 核心内存不足\nEINVAL 传给系统调用的参数不正确。")]),s._v(" "),t("h4",{attrs:{id:"socket-2"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#socket-2"}},[s._v("#")]),s._v(" socket()")]),s._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v("#include <sys/types.h>\n#include <sys/socket.h>\nint socket(int domain, int type, int protocol);\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br")])]),t("p",[s._v("描述：")]),s._v(" "),t("p",[s._v("网络编程中使用的一个系统调用函数，用于创建一个新的套接字，套接字是网络通信中的一种抽象概念，可以理解为一种通信端点，它可以用于在不同的主机之间进行通信。")]),s._v(" "),t("p",[s._v("参数：")]),s._v(" "),t("ul",[t("li",[s._v("domain参数指定了套接字的协议族，比如AF_INET表示IPv4协议族，AF_INET6表示IPv6协议族；")]),s._v(" "),t("li",[s._v("type参数指定了套接字的类型，比如SOCK_STREAM表示面向连接的流式套接字，SOCK_DGRAM表示无连接的数据报套接字；")]),s._v(" "),t("li",[s._v("protocol参数指定协议类型，通常为0，表示使用默认协议。")])]),s._v(" "),t("p",[s._v("返回值：")]),s._v(" "),t("p",[s._v("socket()函数执行成功后会返回一个新的套接字描述符，这个描述符可以用于后续的通信操作。如果函数执行失败，则返回-1，并设置errno变量来指示错误的原因。")]),s._v(" "),t("h4",{attrs:{id:"send"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#send"}},[s._v("#")]),s._v(" send")]),s._v(" "),t("div",{staticClass:"language-c line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-c"}},[t("code",[t("span",{pre:!0,attrs:{class:"token macro property"}},[t("span",{pre:!0,attrs:{class:"token directive-hash"}},[s._v("#")]),t("span",{pre:!0,attrs:{class:"token directive keyword"}},[s._v("include")]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v("<sys/types.h>")])]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token macro property"}},[t("span",{pre:!0,attrs:{class:"token directive-hash"}},[s._v("#")]),t("span",{pre:!0,attrs:{class:"token directive keyword"}},[s._v("include")]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v("<sys/socket.h>")])]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("send")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),s._v(" s"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("const")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("void")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v(" msg"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),s._v(" len"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("unsigned")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),s._v(" falgs"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br")])]),t("p",[s._v("描述：")]),s._v(" "),t("p",[s._v("send()用来将数据由指定的socket 传给对方主机。参数"),t("strong",[s._v("s")]),s._v("为已建立好连接的socket。参数"),t("strong",[s._v("msg")]),s._v("指向欲连线的数据内容, 参数"),t("strong",[s._v("len")]),s._v("则为数据长度。")]),s._v(" "),t("p",[s._v("参数flags一般设0, 其他数值定义如下")]),s._v(" "),t("ul",[t("li",[s._v("MSG_OOB 传送的数据以out-of-band 送出。")]),s._v(" "),t("li",[s._v("MSG_DONTROUTE 取消路由表查询")]),s._v(" "),t("li",[s._v("MSG_DONTWAIT 设置为不可阻断运作")]),s._v(" "),t("li",[s._v("MSG_NOSIGNAL 此动作不愿被SIGPIPE 信号中断。")])]),s._v(" "),t("p",[s._v("返回值：")]),s._v(" "),t("p",[s._v("成功则返回实际传送出去的字符数, 失败返回-1。错误原因存于errno")]),s._v(" "),t("h3",{attrs:{id:"字节序转换"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#字节序转换"}},[s._v("#")]),s._v(" 字节序转换")]),s._v(" "),t("h4",{attrs:{id:"inet-pton"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#inet-pton"}},[s._v("#")]),s._v(" inet_pton")]),s._v(" "),t("div",{staticClass:"language-c line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-c"}},[t("code",[t("span",{pre:!0,attrs:{class:"token macro property"}},[t("span",{pre:!0,attrs:{class:"token directive-hash"}},[s._v("#")]),t("span",{pre:!0,attrs:{class:"token directive keyword"}},[s._v("include")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v("<arpa/inet.h>")])]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("inet_pton")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),s._v(" af"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("const")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("char")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v("src"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("void")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v("dst"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br")])]),t("p",[s._v("描述：")]),s._v(" "),t("p",[s._v("用于将一个 IPv4 或 IPv6 的网络地址从文本格式转换为二进制格式。")]),s._v(" "),t("p",[s._v("参数：")]),s._v(" "),t("ul",[t("li",[t("strong",[s._v("af")]),s._v(" 参数指定了地址族，可以是 AF_INET 表示 IPv4 地址族，也可以是 AF_INET6 表示 IPv6 地址族；")]),s._v(" "),t("li",[t("strong",[s._v("src")]),s._v(" 参数是一个字符串指针，表示待转换的网络地址；")]),s._v(" "),t("li",[t("strong",[s._v("dst")]),s._v(" 参数是一个 void 指针，指向一个用于存储转换结果的缓冲区。")])]),s._v(" "),t("p",[s._v("返回值：")]),s._v(" "),t("p",[s._v("函数返回值为 1 表示转换成功，0 表示 src 参数不是有效的网络地址，-1 表示发生错误，具体的错误信息可以通过 errno 变量获取。")]),s._v(" "),t("h4",{attrs:{id:"inet-pton-2"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#inet-pton-2"}},[s._v("#")]),s._v(" inet_pton")]),s._v(" "),t("div",{staticClass:"language-c line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-c"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("const")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("char")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("inet_ntop")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),s._v(" af"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("const")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("void")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v("src"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("char")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v("dst"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("socklen_t")]),s._v(" size"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br")])]),t("p",[s._v("描述：")]),s._v(" "),t("p",[t("code",[s._v("inet_ntop")]),s._v("是一个用于将网络字节序的IP地址转换为字符串表示（本地字节序）的函数。")]),s._v(" "),t("p",[t("code",[s._v("inet_ntop")]),s._v("函数将网络字节序的IP地址转换为字符串表示，并将结果存储在"),t("code",[s._v("dst")]),s._v("指向的缓冲区中。转换后的IP地址字符串的格式取决于地址族的类型。")]),s._v(" "),t("p",[s._v("参数：")]),s._v(" "),t("ul",[t("li",[t("code",[s._v("af")]),s._v("：地址族（Address Family），指定了要转换的IP地址的类型。常见的值有"),t("code",[s._v("AF_INET")]),s._v("（IPv4）和"),t("code",[s._v("AF_INET6")]),s._v("（IPv6）。")]),s._v(" "),t("li",[t("code",[s._v("src")]),s._v("：指向存储要转换的IP地址的内存块的指针。这个内存块的大小取决于地址族的类型。")]),s._v(" "),t("li",[t("code",[s._v("dst")]),s._v("：指向存储转换后IP地址的字符串的缓冲区的指针。")]),s._v(" "),t("li",[t("code",[s._v("size")]),s._v("：缓冲区的大小，用于防止缓冲区溢出。")])]),s._v(" "),t("p",[s._v("返回值：")]),s._v(" "),t("p",[s._v("函数的返回值是一个指向转换后的IP地址字符串的指针，即"),t("code",[s._v("dst")]),s._v("指针。如果转换成功，返回值指向"),t("code",[s._v("dst")]),s._v("指针；如果发生错误，返回值为NULL，并且可以通过检查全局变量"),t("code",[s._v("errno")]),s._v("来获取错误的具体原因。")]),s._v(" "),t("h4",{attrs:{id:"htons"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#htons"}},[s._v("#")]),s._v(" htons")]),s._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v("uint16_t htons(uint16_t hostshort);\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br")])]),t("p",[s._v("描述：")]),s._v(" "),t("p",[s._v("htons() 是一个网络字节序转换函数，用于将16位的主机字节序转换为网络字节序（大端字节序）。通常在网络编程中使用，以保证在不同机器之间传输数据时字节序的一致性。")]),s._v(" "),t("p",[s._v("参数：")]),s._v(" "),t("p",[t("strong",[s._v("hostshort")]),s._v(" 表示需要转换的16位主机字节序整数、")]),s._v(" "),t("p",[s._v("返回值：")]),s._v(" "),t("p",[s._v("函数返回值为转换后的网络字节序整数。")]),s._v(" "),t("h4",{attrs:{id:"ntohs"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#ntohs"}},[s._v("#")]),s._v(" ntohs")]),s._v(" "),t("div",{staticClass:"language-c line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-c"}},[t("code",[t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("uint16_t")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("ntohs")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("uint16_t")]),s._v(" netshort"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br")])]),t("p",[s._v("描述：")]),s._v(" "),t("p",[t("code",[s._v("ntohs")]),s._v("函数将网络字节序的16位无符号整数转换为主机字节序（本机字节序）的16位无符号整数，")]),s._v(" "),t("p",[s._v("参数：")]),s._v(" "),t("ul",[t("li",[t("code",[s._v("netshort")]),s._v("：网络字节序的16位无符号整数。")])]),s._v(" "),t("p",[s._v("返回：")]),s._v(" "),t("p",[s._v("并返回转换后的结果。")]),s._v(" "),t("h2",{attrs:{id:"epoll"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#epoll"}},[s._v("#")]),s._v(" epoll")]),s._v(" "),t("h3",{attrs:{id:"epoll-wait"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#epoll-wait"}},[s._v("#")]),s._v(" epoll_wait")]),s._v(" "),t("p",[s._v("描述：")]),s._v(" "),t("p",[s._v("epoll_wait 是 Linux 下使用 epoll I/O 多路复用机制时的一个系统调用函数，用于等待事件就绪并获取已就绪的事件。")]),s._v(" "),t("div",{staticClass:"language-c++ line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v("int epoll_wait(int epfd, struct epoll_event *events, int maxevents, int timeout);\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br")])]),t("p",[s._v("参数说明：")]),s._v(" "),t("ul",[t("li",[t("code",[s._v("epfd")]),s._v("：epoll 文件描述符，由 epoll_create 或 epoll_create1 返回的文件描述符。")]),s._v(" "),t("li",[t("code",[s._v("events")]),s._v("：指向 epoll_event 结构体数组的指针，用于存储返回的已就绪事件。")]),s._v(" "),t("li",[t("code",[s._v("maxevents")]),s._v("："),t("code",[s._v("events")]),s._v(" 数组的长度，即最多能够存储的事件个数。")]),s._v(" "),t("li",[t("code",[s._v("timeout")]),s._v("：超时时间，单位是毫秒。如果传入负值，则表示无限等待；如果传入 0，则表示立即返回，不阻塞；如果传入正值，则表示等待的时间上限。")])]),s._v(" "),t("p",[s._v("函数返回值：")]),s._v(" "),t("ul",[t("li",[s._v("成功时，返回已就绪的事件个数。")]),s._v(" "),t("li",[s._v("失败时，返回 -1，并设置 errno 来指示错误类型。")])]),s._v(" "),t("p",[s._v("epoll_wait 函数会阻塞等待，直到有事件就绪或者超过指定的超时时间。当有事件就绪时，将把已就绪的事件从内核事件表复制到 "),t("code",[s._v("events")]),s._v(" 数组中，并返回已就绪的事件个数。")]),s._v(" "),t("p",[s._v("每个 "),t("code",[s._v("events")]),s._v(" 中的 epoll_event 结构体包含了就绪事件的相关信息，比如文件描述符、事件类型和用户定义的数据等。")]),s._v(" "),t("p",[s._v("应用程序需要根据返回的已就绪事件进行相应的处理，例如读写数据、关闭连接等。")]),s._v(" "),t("p",[s._v("总结：epoll_wait 是使用 epoll I/O 多路复用机制时的系统调用函数，用于等待事件就绪并获取已就绪的事件。通过传入 epoll 文件描述符和事件数组，可以获取到已就绪的事件信息，并进行相应的处理。")])])}),[],!1,null,null,null);t.default=e.exports}}]);