(window.webpackJsonp=window.webpackJsonp||[]).push([[80],{397:function(s,t,a){"use strict";a.r(t);var r=a(7),p=Object(r.a)({},(function(){var s=this,t=s._self._c;return t("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[t("h1",{attrs:{id:"数据结构-图的遍历"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#数据结构-图的遍历"}},[s._v("#")]),s._v(" 数据结构——图的遍历")]),s._v(" "),t("p",[t("img",{attrs:{src:"/assets/1685954387455.png",alt:"1685954387455"}})]),s._v(" "),t("p",[t("img",{attrs:{src:"/assets/1685954394085.png",alt:"1685954394085"}})]),s._v(" "),t("p",[t("img",{attrs:{src:"/assets/1685954401958.png",alt:"1685954401958"}})]),s._v(" "),t("p",[s._v("一条道走到黑")]),s._v(" "),t("p",[t("img",{attrs:{src:"/assets/1685954424691.png",alt:"1685954424691"}})]),s._v(" "),t("p",[t("img",{attrs:{src:"/assets/1685954429120.png",alt:"1685954429120"}})]),s._v(" "),t("p",[t("img",{attrs:{src:"/assets/1685954437531.png",alt:"1685954437531"}})]),s._v(" "),t("p",[s._v("2访问完后在2的没有被访问的邻接点中选一个(而2号的邻接点存放在邻接矩阵中行下标为2的这行然后顺序去找前提值必须1网则是权值(非0)；没有访问过<看visit数组对应的值是不是0>)2--》1，访问1之后修改visited[1]=1--\x3e找1没有被访问过的邻接点(行下标为1个这行依次判断<第一个不行值为0没有边看下一个值是1visited数组值为1访问过了>继续看下一个经过判断3号可以的)1--》3 访问3之后修改visited[3]=1 ...3--》5，(5第一个邻接点2访问过了第二个邻接点3也访问过了)--？回退回3--》回退回1--》4--》6--》退到4--》退回1--》退回2(退回起点)访问完毕")]),s._v(" "),t("p",[s._v("DFS访问结果：2--\x3e1--\x3e3--\x3e5--\x3e4--\x3e6（存储结构确定-结果确定）")]),s._v(" "),t("p",[t("img",{attrs:{src:"/assets/1685954442757.png",alt:"1685954442757"}})]),s._v(" "),t("p",[s._v("缺了邻接表的深度优先遍历")]),s._v(" "),t("p",[t("img",{attrs:{src:"/assets/1685954448809.png",alt:""}})]),s._v(" "),t("p",[t("img",{attrs:{src:"/assets/1685954454524.png",alt:"1685954454524"}})]),s._v(" "),t("p",[s._v("访问完一个连通分量在其他没有访问过的元素中在找一个(次数可以看出连通分量的个数)")]),s._v(" "),t("p",[s._v("深度优先(一条路走到底)广度(一圈一圈的)")]),s._v(" "),t("p",[t("img",{attrs:{src:"/assets/1685954460719.png",alt:"1685954460719"}})]),s._v(" "),t("p",[t("img",{attrs:{src:"/assets/1685954465368.png",alt:"1685954465368"}})]),s._v(" "),t("p",[s._v("邻接表会了邻接矩阵更简单")]),s._v(" "),t("p",[s._v("和树的==层次遍历==类似(用==队列==根结点出队将它的左右孩子入队...)设起点为V1，在数组中的0号位置0入队--》V1访问完后出队还要修改visited[1]=1把V1的没有访问过的邻接点入队将1和2入队--》访问完V2把V2出队修改visited[2]=1把V2的没有访问过的邻接点入队(3和4)--》V3(当前队头)访问完出队修改visited[1]=1...(队为空visit数组均为1遍历结束)")]),s._v(" "),t("p",[t("img",{attrs:{src:"/assets/1685954473021.png",alt:"1685954473021"}})]),s._v(" "),t("p",[t("img",{attrs:{src:"/assets/1685954478050.png",alt:"1685954478050"}})])])}),[],!1,null,null,null);t.default=p.exports}}]);