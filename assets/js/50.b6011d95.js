(window.webpackJsonp=window.webpackJsonp||[]).push([[50],{367:function(_,v,t){"use strict";t.r(v);var s=t(7),r=Object(s.a)({},(function(){var _=this,v=_._self._c;return v("ContentSlotsDistributor",{attrs:{"slot-key":_.$parent.slotKey}},[v("h1",{attrs:{id:"数据结构-二"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#数据结构-二"}},[_._v("#")]),_._v(" 数据结构（二）")]),_._v(" "),v("blockquote",[v("p",[_._v("基本概念和术语")])]),_._v(" "),v("p",[_._v("1."),v("strong",[_._v("数据")]),_._v("(Data)是客观事物的符号表示，是所有"),v("strong",[_._v("能输入到计算机中并被计算机程序处理")]),_._v("的符号的总称（集合）。是信息的载体；是对客观事物的符号化表示；可以被计算机"),v("strong",[_._v("识别、存储和加工")]),_._v("。数据不仅仅包含整型、实型等"),v("strong",[_._v("数值类型")]),_._v("，还包含图形、图像、声音、视频及动画等"),v("strong",[_._v("非数值类型")]),v("br"),_._v("\n对于整型、实型等数值类型,可以进行"),v("strong",[_._v("数值计算")]),_._v("；"),v("br"),_._v("\n对于字符数据类型，就需要进行"),v("strong",[_._v("非数值的处理")]),_._v("。而声音、图像、视频等其实是可以通过"),v("strong",[_._v("编码")]),_._v("的手段变成字符数据来处理的。")]),_._v(" "),v("p",[_._v("2."),v("strong",[_._v("数据元素")]),_._v("(Data  Element)是数据的"),v("strong",[_._v("基本单位")]),_._v("，在计算机中通常作为一个整体进行考虑和处理。在有些情况下，数据元素也称为"),v("strong",[_._v("元素、记录、节点、顶点")]),_._v("等。如前一节示例中的一名学生记录，树中棋盘的一个格局（状态），以及图中的一个顶点等。")]),_._v(" "),v("p",[_._v("3."),v("strong",[_._v("数据项")]),_._v("(Data Item)是组成数据元素的、有独立含义的、不可分割的"),v("strong",[_._v("最小单位")]),_._v("。例如，学生基本信息表中的学号、姓名、性别等都是数据项。【数据项是“数据的最小单位。但真正讨论问题时，"),v("strong",[_._v("数据元素才是数据结构中建立数据模型的着眼点")]),_._v("。就像我们讨论一部电影时，是讨论这部电影角色这样的数据元素”，而不是针对这个角色的姓名或者年龄这样的“数据项”去研究分析。】")]),_._v(" "),v("p",[v("img",{attrs:{src:"/assets/1685935179414.png",alt:"1685935179414"}})]),_._v(" "),v("p",[_._v("4."),v("strong",[_._v("数据对象")]),_._v("(Data Object)是性质相同的数据元素的集合，是数据的一个"),v("strong",[_._v("子集")]),_._v("。例如：整数数据对象是集合N={0, ±1,±2,...},字母字符数据对象是集合C={'A','B', ...‘Z’,'a','b', ...， 'z'},学生基本信息表也可以是一个数据对象。由此可以看出，不论数据元素集合是无限集（如整数集），或是有限集（如字母字符集），还是由多个数据项组成的复合数据元素（如学生表）的集合，只要集合内元素的性质均相同，都可称之为一个数据对象。")]),_._v(" "),v("p",[_._v("说了数据结构中的数据那数据结构中的结构又是什么呢？")]),_._v(" "),v("blockquote",[v("p",[_._v("数据结构")])]),_._v(" "),v("p",[v("strong",[_._v("结构")]),_._v("，简单的理解就是"),v("strong",[_._v("关系")]),_._v("，比如分子结构，就是说组成分子的原子之间的排列方式。严格点说，结构是指各个组成部分相互搭配和排列的方式。在现实世界中，不同数据元素之间不是独立的，而是存在特定的关系，我们将这些关系称为结构。那数据结构是什么？")]),_._v(" "),v("p",[v("strong",[_._v("数据结构")]),_._v("(Data Structure)**是相互之间存在一种或多种特定关系的数据元素的集合。**换句话说，数据结构是带”结构＂的数据元素的集合，“结构”就是指数据元素之间存在的关系。")]),_._v(" "),v("blockquote",[v("p",[_._v("逻辑结构和物理结构(存储结构)")])]),_._v(" "),v("ul",[v("li",[v("p",[_._v("逻辑结构")]),_._v(" "),v("p",[_._v("数据的逻辑结构是从逻辑关系上描述数据，它与数据的存储无关，是独立于计算机的。因此，数据的逻辑结构可以看作是从具体问题抽象出来的数学模型。数据的逻辑结构有两个要素：一是"),v("strong",[_._v("数据元素")]),_._v("；二是"),v("strong",[_._v("关系")]),_._v("。")])])]),_._v(" "),v("p",[v("img",{attrs:{src:"/assets/1685935203506.png",alt:"1685935203506"}})]),_._v(" "),v("p",[v("img",{attrs:{src:"/assets/1685935216874.png",alt:"1685935216874"}})]),_._v(" "),v("ul",[v("li",[_._v("物理结构/存储结构")])]),_._v(" "),v("p",[v("strong",[_._v("物理结构：数据的逻辑结构在计算机中(内存)的存储形式")]),_._v("。分为顺序存储结构、链式存储结构、索引存储结构、散列存储结构。")]),_._v(" "),v("p",[_._v("**1.顺序存储结构  **")]),_._v(" "),v("p",[_._v("顺序存储结构是把数据元素存放在"),v("strong",[_._v("连续")]),_._v("的存储单元里，数据元素之间的逻辑关系是通过数据元素的位置。(在前面的数据元素就存在前面；在后面的数据元素就存在后面)C语言用"),v("strong",[_._v("数组")]),_._v("来实现顺序存储结构")]),_._v(" "),v("p",[v("img",{attrs:{src:"/assets/1685935228537.png",alt:"1685935228537"}})]),_._v(" "),v("p",[_._v("例：(bat,cat,eat_mat)")]),_._v(" "),v("p",[v("strong",[_._v("2.链式存储结构")])]),_._v(" "),v("p",[_._v("用一组任意的存储单元存储数据元素(可能连续也可能不连续)，数据元素之间的逻辑关系用指针来表示(用指针存放后继元素的存储地址)")]),_._v(" "),v("p",[_._v("C语言中用指针来实现链式存储结构")]),_._v(" "),v("p",[v("img",{attrs:{src:"/assets/1685935253638.png",alt:"1685935253638"}})]),_._v(" "),v("p",[_._v("存放(bat,cat,eat_mat)")]),_._v(" "),v("p",[v("img",{attrs:{src:"/assets/1685935261256.png",alt:"1685935261256"}})]),_._v(" "),v("p",[_._v("现在如银行、医院等地方，设置了排队系统，也就是每个人去了，先领一个号，等着叫号，叫到时去办理业务或看病。在等待的时候，你爱在哪在哪，可以坐着、站着或者走动，甚至出去逛一圈，只要及时回来就行。你关注的是前一个号有没有被叫到，叫到了，下一个就轮到了。")]),_._v(" "),v("p",[v("strong",[_._v("3.索引存储结构")])]),_._v(" "),v("p",[v("img",{attrs:{src:"/assets/1685935277290.png",alt:"1685935277290"}})]),_._v(" "),v("p",[_._v("在存储节点信息的同时，还建立附加索引"),v("br"),_._v("\n索引表中的每一项称为一个索引项，"),v("br"),_._v("\n索引项的一般形式是：(关键字，地址）"),v("br"),_._v("\n关键字是能唯一标识一个结点的那些数据项。"),v("br"),_._v("\n若每个结点在索引表中都有一个索引项，则该索引表称之为稠密索引（Dense Index)。若一组结点在索引表中只\n对应一个索引项，则该索引表称之为稀疏索引（Sparse Index)。"),v("br"),_._v(" "),v("strong",[_._v("4.散列存储结构")])]),_._v(" "),v("p",[v("img",{attrs:{src:"/assets/1685935294390.png",alt:"1685935294390"}})]),_._v(" "),v("blockquote",[v("p",[_._v("数据类型")])]),_._v(" "),v("p",[_._v("说到数据类型其实我们并不陌生，在使用高级程序设计语言编写程序时，必须对程序中出现的每个变量、常量或表达式、C语言中函数的参数、返回值，明确说明它们所属的数据类型。"),v("br"),_._v(" "),v("strong",[_._v("C语言")]),_._v("中：提供int,char,float,double等基本数据类型；数组、结构、共用体、枚举等构造数据类型；还有指针、空（void)类型，用户也可用typedef自己定义数据类型。而另一些常用的数据结构，如栈、队列、树、图等，不能直接用数据类型来表示。")]),_._v(" "),v("p",[_._v("在C语言中，数据类型可以"),v("strong",[_._v("分为两类")]),_._v("：\n原子类型：是不可以再分解的基本类型，包括整型、实型、字符型等"),v("br"),_._v("\n结构类型：由若干个类型组合而成，是可以再分解的。例如，整型姿型数据组成的数组。")]),_._v(" "),v("p",[_._v("当年那些设计计算机语言的人，为什么会考虑到数据类型呢？"),v("br"),_._v("\n比如，大家都需要住房子，也都希望房子越大越好。但显然，没有钱，考虑房子是没啥意义的。于是商品房就出现了各种各样的房型，有别墅的，有错层的，有单间的；有一百多平米的，也有几十平米的，甚至在北京还出现了胶囊公寓——只有两平米的房间……这样就满足了不同人的需要。")]),_._v(" "),v("p",[_._v("类型明显或隐含地规定了程序执行期间变量或表达式的取值范围、存储方式以及允许进行的运算。"),v("br"),_._v("\n例如，C语言中定义变量i为int类型，就表示是[min,max]范围的整数，[-32768～32767,16位计算机上]")]),_._v(" "),v("p",[_._v("在这个整数集上可以进行+、-、*、/、%的操作，而不能进行其他数据类型比如字符串的一些操作，而实型变量也有自己的取值范围和相应运算，比如取模运算是不能用于实型变量的。"),v("br"),_._v("\n数据类型是一个值的集合和定义在这个值集上的一组操作的总称。")]),_._v(" "),v("blockquote",[v("p",[_._v("抽象")])]),_._v(" "),v("p",[v("img",{attrs:{src:"/assets/1685935308165.png",alt:"1685935308165"}})]),_._v(" "),v("p",[_._v("抽象-百度百科")]),_._v(" "),v("p",[v("img",{attrs:{src:"/assets/1685935316807.png",alt:"1685935316807"}})]),_._v(" "),v("p",[_._v("你在这幅图中看到了什么？相信大多数人会说看到的圆，其实这就是抽象。我们看到了他的本质，而去掉了一些非本质的东西，比如大小颜色，线条的粗细，空心还是实心。"),v("br"),_._v("\n那什么是圆呢？"),v("br"),_._v("\n圆是到某个点距离相等的点的集合这个定点就是圆心，距离就是半径，我们就可以描述这个圆的一些相关信息了"),v("br"),_._v(" "),v("strong",[_._v("运算")]),_._v(":构造圆、求面积、求周长")]),_._v(" "),v("blockquote",[v("p",[_._v("抽象数据类型")])]),_._v(" "),v("p",[_._v("抽象数据类型(Abstract Data Type, ADT)一般指由用户定义的、表示应用问题的数学模型，以及定义在这个模型上的一组操作的总称，具体包括三部分：数据对象、数据对象上关系的集合以及对数据对象的基本操作的集合。"),v("br"),_._v("\n由用户定义，从问题抽象出数据模型（逻辑结构）"),v("br"),_._v("\n还包括定义在数据模型上的一组抽象运算（相关操作）"),v("br"),_._v("\n不考虑计算机内的具体存储结构与运算的具体实现算法")]),_._v(" "),v("blockquote",[v("p",[_._v("抽象数据类型的形式定义")])]),_._v(" "),v("p",[_._v("抽象数据类型可用(D,S,P)三元组表示【离散数学上的概念】其中："),v("br"),_._v("\nD是数据对象；"),v("br"),_._v("\nS是D上的关系集；数据对象之间的关系构成的集合，(数据对象与数据对象之间可能有多种关系构成了这个集合)"),v("br"),_._v("\nP是对D的基本操作集。")]),_._v(" "),v("p",[v("img",{attrs:{src:"/assets/1685935326923.png",alt:"1685935326923"}})]),_._v(" "),v("blockquote",[v("p",[_._v("说明")])]),_._v(" "),v("p",[_._v("参数表："),v("strong",[_._v("赋值参数，只为操作提供输入值")]),v("br"),_._v("\n比如求圆的面积的操作area(操作的名字)(r)(操作的参数)"),v("br"),_._v("\n对图形进行一个缩放n倍scale(G(被操作的图形),n)对图形进行缩放，它当然也会返回一个图形 G'=scale(G,n)返回值要赋值给G 写成scale（**&**G,n）"),v("br"),_._v('\n引用参数以"&"打头，除可提供输入值外，还将返回操作结果。'),v("br"),_._v("\n”初始条件”描述了操作执行之前数据结构和参数应满足的条件，若初始条件为空，则省略。”"),v("br"),_._v("\n操作结果”说明了操作正常完成之后，数据结构的变化状况和应返回的结果。")]),_._v(" "),v("p",[v("img",{attrs:{src:"/assets/1685935336438.png",alt:"1685935336438"}})]),_._v(" "),v("blockquote",[v("p",[_._v("Summary")])]),_._v(" "),v("p",[v("img",{attrs:{src:"/assets/1685935346934.png",alt:"1685935346934"}})]),_._v(" "),v("p",[_._v("要想达到解决问题的目的，就要把抽象的，在计算机上用已有的数据类型进行实现")]),_._v(" "),v("p",[v("img",{attrs:{src:"/assets/1685935366243.png",alt:"1685935366243"}})]),_._v(" "),v("p",[v("img",{attrs:{src:"/assets/1685935418895.png",alt:"1685935418895"}})]),_._v(" "),v("p",[_._v("抽象数据类型——复数")]),_._v(" "),v("p",[_._v("抽象数据类型的概念与面向对象方法的思想是一致的。抽象数据类型独立于具体实现，将数据和操作封装在一起，使得用户程序只能通过抽象数据类型定义的某些操作来访问其中的数据，从而实现了信息隐藏。在C++中，我们可以用类的声明表示抽象数据类型，用类的实现来实现抽象数据类型。因此，C++中实现的类相当于数据的存储结构及其在存储结构上实现的对数据的操作")])])}),[],!1,null,null,null);v.default=r.exports}}]);