(window.webpackJsonp=window.webpackJsonp||[]).push([[70],{386:function(s,t,a){"use strict";a.r(t);var r=a(7),p=Object(r.a)({},(function(){var s=this,t=s._self._c;return t("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[t("h1",{attrs:{id:"数据结构-二叉树的性质-存储结构"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#数据结构-二叉树的性质-存储结构"}},[s._v("#")]),s._v(" 数据结构——二叉树的性质+存储结构")]),s._v(" "),t("p",[t("img",{attrs:{src:"/assets/1685939135411.png",alt:"1685939135411"}})]),s._v(" "),t("p",[t("img",{attrs:{src:"/assets/1685939143838.png",alt:""}})]),s._v(" "),t("p",[t("img",{attrs:{src:"/assets/1685939150530.png",alt:"1685939150530"}})]),s._v(" "),t("p",[s._v("其中n为总的结点数")]),s._v(" "),t("p",[t("img",{attrs:{src:"/assets/1685939158437.png",alt:"1685939158437"}})]),s._v(" "),t("p",[t("img",{attrs:{src:"/assets/1685939165564.png",alt:"1685939165564"}})]),s._v(" "),t("p",[t("img",{attrs:{src:"/assets/1685939172510.png",alt:"1685939172510"}})]),s._v(" "),t("p",[t("img",{attrs:{src:"/assets/1685939177403.png",alt:"1685939177403"}})]),s._v(" "),t("p",[t("img",{attrs:{src:"/assets/1685939182290.png",alt:"1685939182290"}})]),s._v(" "),t("p",[s._v("1、叶子只可能分布在层次最大的两层上")]),s._v(" "),t("p",[s._v("2、对任一结点，如果其右子树的最大层次为i，则其左子树的最大层次必为i或i+1")]),s._v(" "),t("p",[t("img",{attrs:{src:"/assets/1685939190737.png",alt:"1685939190737"}})]),s._v(" "),t("p",[t("img",{attrs:{src:"/assets/1685939198375.png",alt:"1685939198375"}})]),s._v(" "),t("p",[t("img",{attrs:{src:"/assets/1685939205286.png",alt:""}})]),s._v(" "),t("p",[t("img",{attrs:{src:"/assets/1685939210426.png",alt:"1685939210426"}})]),s._v(" "),t("blockquote",[t("h1",{attrs:{id:"二叉树的存储结构"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#二叉树的存储结构"}},[s._v("#")]),s._v(" 二叉树的存储结构")])]),s._v(" "),t("p",[t("img",{attrs:{src:"/assets/1685939217051.png",alt:"1685939217051"}})]),s._v(" "),t("p",[t("img",{attrs:{src:"/assets/1685939223208.png",alt:"1685939223208"}})]),s._v(" "),t("p",[t("img",{attrs:{src:"/assets/1685939231175.png",alt:"1685939231175"}})]),s._v(" "),t("p",[s._v("二叉树顺序存储的缺点顺序结构大小固定当树的元素个数变化比较大时，顺序存储不合适")]),s._v(" "),t("p",[s._v("一般情况我们说数组不需要存储地址，存储密度达到1很大 但对于树而言顺序结构通过编号来表示双亲和孩子/直接前驱后继的关系。当出现空结点时对应编号储存0或者不储存元素。这些位置就都被浪费掉了")]),s._v(" "),t("p",[t("img",{attrs:{src:"/assets/1685939238662.png",alt:"1685939238662"}})]),s._v(" "),t("p",[t("img",{attrs:{src:"/assets/1685939250397.png",alt:"1685939250397"}})]),s._v(" "),t("p",[t("img",{attrs:{src:"/assets/1685939275882.png",alt:"1685939275882"}})])])}),[],!1,null,null,null);t.default=p.exports}}]);